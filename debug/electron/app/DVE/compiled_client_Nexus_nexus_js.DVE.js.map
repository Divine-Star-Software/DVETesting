{"version":3,"file":"compiled_client_Nexus_nexus_js.DVE.js","mappings":";;;;;;;;;;;;;;AAAiD;AACjD,WAAW,iBAAiB;AACiC;AAC7D,MAAM,iEAAU;AAChB,qBAAqB,2EAAiB,CAAC,2DAAI;AAC3C;AACA,4EAAqB;AACrB;AACA,CAAC;AACD;AACA,4EAAqB;AACrB;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,+EAAwB;AACxC;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5BD;AACwC;AACiB;AACe;AACX;AACiB;AACvB;AACqB;AAClB;AACT;AACC;AAC4B;AACvE;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,kBAAkB,6DAAqB,CAAC,6FAA0B;AAClE,QAAQ,sFAAkC;AAC1C,KAAK;AACL,eAAe,6DAAqB,CAAC,0FAAuB;AAC5D,QAAQ,gEAAe;AACvB,QAAQ,+DAAc;AACtB;AACA,KAAK;AACL,eAAe,6DAAqB,CAAC,0FAAuB;AAC5D,WAAW,6DAAqB,CAAC,sFAAmB;AACpD,YAAY,6DAAqB,CAAC,uFAAoB;AACtD,YAAY,6DAAqB,CAAC,uFAAoB;AACtD,kBAAkB,6DAAqB,CAAC,6FAA0B;AAClE,eAAe,6DAAqB,CAAC,0FAAuB;AAC5D,gBAAgB,6DAAqB,CAAC,2FAAwB;AAC9D,gBAAgB,6DAAqB,CAAC,2FAAwB;AAC9D,eAAe,6DAAqB,CAAC,kGAA+B;AACpE,QAAQ,oFAAiC;AACzC,KAAK;AACL;AACA;AACA,IAAI,yGAAoC;AACxC,CAAC;AACD;AACA,IAAI,4EAAuB;AAC3B,CAAC;AACD;AACA,IAAI,+EAA0B;AAC9B,CAAC;AACD;AACA,IAAI,6EAAwB;AAC5B,CAAC;AACD;AACA,IAAI,gFAA2B;AAC/B,CAAC;AACD;AACA,IAAI,6EAAwB;AAC5B,CAAC;AACD;AACA,IAAI,gFAA2B;AAC/B,CAAC;AACD;AACA,IAAI,4FAAwB;AAC5B,CAAC;AACD;AACA,IAAI,sEAAe;AACnB,CAAC;AACD;AACA,IAAI,yEAAgB;AACpB,CAAC;AACD;AACA,IAAI,yEAAgB;AACpB,IAAI,+EAAsB;AAC1B,CAAC;;;;;;;;;;;;;;;;;;;;;;;;AC9ED;AAC4D;AACH;AACzD;AACgD;AACoB;AACpE;AAC4D;AACL;AACF;AACQ;AACrB;AACjC;AACP;AACA,QAAQ,kDAAU;AAClB,UAAU,wDAAI;AACd,cAAc,4EAAc;AAC5B,kBAAkB,+DAAY;AAC9B,UAAU,6DAAW;AACrB,eAAe,qEAAY;AAC3B,eAAe,kEAAS;AACxB,gBAAgB,qEAAU;AAC1B;AACA,cAAc,yEAAe;AAC7B,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA,mBAAmB,sEAAkB;;;;;;;;;;;;;;;;AChCG;AACjC;AACP;AACA;AACA;AACA;AACA,UAAU,wDAAgB;AAC1B,yCAAyC,uCAAuC;AAChF;;;;;;;;;;;;;;;;;ACRwC;AACe;AACvD,mBAAmB,yDAAiB;AACpC;AACA;AACA,IAAI,yEAAiB;AACrB,CAAC;AACM;;;;;;;;;;;;;;;;ACPiC;AACxC,kBAAkB,6DAAqB;AAChC;;;;;;;;;;;;;;;;ACFqC;;;;;;;;;;;;;;;ACArC;AACP,iBAAiB;AACjB;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,6CAA6C,IAAI;AACjD;AACA;AACA,KAAK;AACL;;;;;;;;;;;;;;;;;ACZA;AAC6D;AACM;AAC5D;AACP,+BAA+B,qEAAW;AAC1C,+BAA+B,2EAAa;AAC5C;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;;;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;;;;;;;;;;;;;;AC/BO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;;;;;;;;;;;;;;;;;;;;ACtGA;AAC8D;AACQ;AACL;AACK;AACtE;AAC6F;AACtF;AACP,UAAU,wEAAS;AACnB,gBAAgB,+EAAiB;AACjC,eAAe,0EAAe;AAC9B,mBAAmB,gFAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,0GAAwB;;;;;;;;;;;;;;;;;;ACvBoC;AACU;AACvB;AAC/C;AACO;AACP,mBAAmB,gFAAQ;AAC3B;AACA;AACA,mBAAmB,sEAAO;AAC1B,2BAA2B,sEAAO;AAClC,oBAAoB,sEAAO;AAC3B;AACA,mBAAmB,sEAAO;AAC1B,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,+BAA+B,WAAW;AAC1C,mCAAmC,WAAW;AAC9C,uCAAuC,WAAW;AAClD;AACA;AACA,+CAA+C,mEAAe;AAC9D;AACA;AACA;AACA;AACA,wCAAwC,qBAAqB;AAC7D;AACA;AACA,sCAAsC,4EAAwB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC7GwC;AACE;;;;;;;;;;;;;;;;;;;;ACDe;AACQ;AACJ;AACO;AACrB;AAC/C;AACA,YAAY,iDAAiD,EAAE,gFAAmB;AAClF;AACA;AACA;AACA,IAAI,yEAAqB,OAAO,yEAAiB;AACjD;AACA;AACA;AACA,IAAI,uEAAmB,OAAO,qEAAe;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACO;AACP;AACA,uBAAuB,wDAAW,CAAC,yEAAqB,EAAE,uEAAmB;AAC7E;AACA;;;;;;;;;;;;;;;;;;AC9CgE;AACJ;AACc;AACnE,0BAA0B,0EAAU;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,sEAAO;AAChC,wBAAwB,sEAAO;AAC/B;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,uFAA+B;AAC9D;AACA;AACA,+BAA+B,gGAAwC;AACvE;AACA;AACA,+BAA+B,gGAAwC;AACvE,+BAA+B,iGAAyC;AACxE;AACA;AACA,+BAA+B,6FAAqC;AACpE,+BAA+B,8FAAsC;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,0BAA0B;AAChE,8CAA8C,0BAA0B;AACxE,kDAAkD,0BAA0B;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC5KqC;AACJ;;;;;;;UCDjC;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;;;;WClCA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,IAAI;WACJ;WACA;WACA,IAAI;WACJ;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,CAAC;WACD;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,EAAE;WACF;WACA,sGAAsG;WACtG;WACA;WACA;WACA;WACA;WACA;WACA;WACA,GAAG;WACH;WACA;WACA;WACA;WACA;WACA,GAAG;WACH;WACA,EAAE;WACF;WACA;;;;;WChEA;WACA;WACA;WACA;WACA,+BAA+B,wCAAwC;WACvE;WACA;WACA;WACA;WACA,iBAAiB,qBAAqB;WACtC;WACA;WACA,kBAAkB,qBAAqB;WACvC;WACA;WACA,KAAK;WACL;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;WC3BA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,EAAE;WACF;;;;;WCRA;WACA;WACA;WACA;WACA;;;;;WCJA;WACA;WACA;WACA;WACA,GAAG;WACH;WACA;WACA,CAAC;;;;;WCPD;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;WCNA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;WCfA;;WAEA;WACA;WACA;WACA;WACA;;WAEA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,aAAa;WACb;WACA;WACA;WACA;;WAEA;WACA;WACA;;WAEA;;WAEA;;;;;WCpCA;WACA;WACA;WACA;;;;;UEHA;UACA","sources":["webpack://dve-testing/./compiled/client/Nexus/nexus.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/Data/DataSyncNode.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/Nexus/DivineVoxelEngineNexus.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/Nexus/Init/InitNexusWorker.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/Nexus/Threads/Parent/ParentComm.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/Nexus/Threads/World/WorldComm.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/Nexus/index.js","webpack://dve-testing/../../DSLIBS/dvePlugIns/Physics/dist/Nexus/Colliders/ColliderManager.js","webpack://dve-testing/../../DSLIBS/dvePlugIns/Physics/dist/Nexus/Colliders/Functions/RegisterDefaultColliders.js","webpack://dve-testing/../../DSLIBS/dvePlugIns/Physics/dist/Nexus/Colliders/default/Box/Box.collider.js","webpack://dve-testing/../../DSLIBS/dvePlugIns/Physics/dist/Nexus/Colliders/default/Stair/Stair.collider.js","webpack://dve-testing/../../DSLIBS/dvePlugIns/Physics/dist/Nexus/Collisions/CollisionsHandler.js","webpack://dve-testing/../../DSLIBS/dvePlugIns/Physics/dist/Nexus/DivineVoxelPhysics.js","webpack://dve-testing/../../DSLIBS/dvePlugIns/Physics/dist/Nexus/Entities/Entity.base.js","webpack://dve-testing/../../DSLIBS/dvePlugIns/Physics/dist/Nexus/index.js","webpack://dve-testing/../../DSLIBS/dvePlugIns/Player/dist/Nexus/InitNexusPlayer.js","webpack://dve-testing/../../DSLIBS/dvePlugIns/Player/dist/Nexus/NexusPlayer.js","webpack://dve-testing/../../DSLIBS/dvePlugIns/Player/dist/Nexus/index.js","webpack://dve-testing/webpack/bootstrap","webpack://dve-testing/webpack/runtime/async module","webpack://dve-testing/webpack/runtime/chunk loaded","webpack://dve-testing/webpack/runtime/define property getters","webpack://dve-testing/webpack/runtime/ensure chunk","webpack://dve-testing/webpack/runtime/get javascript chunk filename","webpack://dve-testing/webpack/runtime/global","webpack://dve-testing/webpack/runtime/hasOwnProperty shorthand","webpack://dve-testing/webpack/runtime/make namespace object","webpack://dve-testing/webpack/runtime/publicPath","webpack://dve-testing/webpack/runtime/importScripts chunk loading","webpack://dve-testing/webpack/runtime/startup chunk dependencies","webpack://dve-testing/webpack/before-startup","webpack://dve-testing/webpack/startup","webpack://dve-testing/webpack/after-startup"],"sourcesContent":["import { DVEN } from \"divine-voxel-engine/Nexus\";\r\n//import { GetNexusPlayer } from \"./Player/InitNexusPlayer.js\";\r\nimport { INIT_NEXUS_PLAYER } from \"dve-plugins-player/Nexus\";\r\nawait DVEN.$INIT();\r\nconst player = await INIT_NEXUS_PLAYER(DVEN);\r\nplayer.setPosition(0, 200, 0);\r\nDVEN.TC.registerTasks(\"set-player-position\", (data) => {\r\n    player.setPosition(...data);\r\n});\r\nlet updating = false;\r\nDVEN.TC.registerTasks(\"start-world\", (data) => {\r\n    updating = true;\r\n    player.setPosition(...data);\r\n});\r\nlet msterialStandingOn = \"stone\";\r\nsetInterval(() => {\r\n    if (!updating)\r\n        return;\r\n    player.update();\r\n    if (player.onGround) {\r\n        if (player.dataTool.loadInAt(player.position.x >> 0, (player.position.y - 1) >> 0, player.position.z >> 0)) {\r\n            let material = player.dataTool.getMaterial();\r\n            if (material != msterialStandingOn) {\r\n                msterialStandingOn = material;\r\n                DVEN.parentComm.runTasks(\"set-material\", material);\r\n            }\r\n        }\r\n    }\r\n}, 17);\r\n","//objects\r\nimport { ThreadComm } from \"threadcomm\";\r\nimport { WorldRegister } from \"./World/WorldRegister.js\";\r\nimport { DataSyncTypes } from \"../Common/Threads/Contracts/DataSync.js\";\r\nimport { VoxelPaletteReader } from \"./Voxel/VoxelPalette.js\";\r\nimport { DimensionsRegister } from \"./World/Dimensions/DimensionsRegister.js\";\r\nimport { ChunkTags } from \"./World/Chunk/ChunkTags.js\";\r\nimport { RegionHeaderTags, RegionTags } from \"./World/Region/RegionTags.js\";\r\nimport { ColumnTags } from \"./World/Column/ColumnTags.js\";\r\nimport { VoxelTags } from \"./Voxel/VoxelTags.js\";\r\nimport { Register } from \"./Register/Register.js\";\r\nimport { RegionHeaderRegister } from \"./World/Region/RegionHeaderRegister.js\";\r\nexport const DataSyncNode = {\r\n    _states: {\r\n        voxelData: false,\r\n    },\r\n    isReady() {\r\n        let done = true;\r\n        for (const state of Object.keys(this._states)) {\r\n            if (!this._states[state]) {\r\n                done = false;\r\n            }\r\n        }\r\n        return true;\r\n    },\r\n    voxelPalette: ThreadComm.onDataSync(DataSyncTypes.voxelPalette, (data) => {\r\n        VoxelPaletteReader.setVoxelPalette(data[0], data[1]);\r\n    }),\r\n    voxelData: ThreadComm.onDataSync(DataSyncTypes.voxelTags, (data) => {\r\n        VoxelTags.$INIT(data[0]);\r\n        VoxelTags.sync(new Uint16Array(data[1]));\r\n        DataSyncNode._states.voxelData = true;\r\n    }),\r\n    dimension: ThreadComm.onDataSync(DataSyncTypes.dimesnion),\r\n    chunk: ThreadComm.onDataSync(DataSyncTypes.chunk),\r\n    column: ThreadComm.onDataSync(DataSyncTypes.column),\r\n    region: ThreadComm.onDataSync(DataSyncTypes.region),\r\n    regionHeader: ThreadComm.onDataSync(DataSyncTypes.regionHeader),\r\n    chunkTags: ThreadComm.onDataSync(DataSyncTypes.chunkTags),\r\n    columnTags: ThreadComm.onDataSync(DataSyncTypes.columnTags),\r\n    regionTags: ThreadComm.onDataSync(DataSyncTypes.regionTags),\r\n    stringMap: ThreadComm.onDataSync(DataSyncTypes.registerStringMap, (data) => {\r\n        Register.stringMaps.syncStringMap(data);\r\n    }),\r\n};\r\nDataSyncNode.dimension.addOnSync((data) => {\r\n    DimensionsRegister.registerDimension(data.id, data.options);\r\n});\r\nDataSyncNode.chunk.addOnSync((data) => {\r\n    WorldRegister.chunk.add(data[0], data[1]);\r\n});\r\nDataSyncNode.chunk.addOnUnSync((data) => {\r\n    WorldRegister.chunk.remove(data);\r\n});\r\nDataSyncNode.column.addOnSync((data) => {\r\n    WorldRegister.column.add(data[0], data[1]);\r\n});\r\nDataSyncNode.column.addOnUnSync((data) => {\r\n    WorldRegister.column.remove(data);\r\n});\r\nDataSyncNode.region.addOnSync((data) => {\r\n    WorldRegister.region.add(data[0], data[1]);\r\n});\r\nDataSyncNode.region.addOnUnSync((data) => {\r\n    WorldRegister.region.remove(data);\r\n});\r\nDataSyncNode.regionHeader.addOnSync((data) => {\r\n    RegionHeaderRegister.add(data[0], data[1]);\r\n});\r\nDataSyncNode.chunkTags.addOnSync((data) => {\r\n    ChunkTags.$INIT(data);\r\n});\r\nDataSyncNode.columnTags.addOnSync((data) => {\r\n    ColumnTags.$INIT(data);\r\n});\r\nDataSyncNode.regionTags.addOnSync((data) => {\r\n    RegionTags.$INIT(data[0]);\r\n    RegionHeaderTags.$INIT(data[1]);\r\n});\r\n","//comms\r\nimport { ParentComm } from \"./Threads/Parent/ParentComm.js\";\r\nimport { WorldComm } from \"./Threads/World/WorldComm.js\";\r\n//objects\r\nimport { Util } from \"../Global/Util.helper.js\";\r\nimport { EngineSettings } from \"../Data/Settings/EngineSettings.js\";\r\n//functions\r\nimport { InitNexusWorker } from \"./Init/InitNexusWorker.js\";\r\nimport { DataSyncNode } from \"../Data/DataSyncNode.js\";\r\nimport { DataManager } from \"../Data/DataManager.js\";\r\nimport { WorldPainter } from \"../Data/World/WorldPainter.js\";\r\nimport { ThreadComm } from \"threadcomm\";\r\nexport const DVEN = {\r\n    environment: \"browser\",\r\n    TC: ThreadComm,\r\n    UTIL: Util,\r\n    settings: EngineSettings,\r\n    dataSyncNode: DataSyncNode,\r\n    data: DataManager,\r\n    worldData: WorldPainter,\r\n    worldComm: WorldComm,\r\n    parentComm: ParentComm,\r\n    async $INIT() {\r\n        await InitNexusWorker(this);\r\n    },\r\n    isReady() {\r\n        return DVEN.worldComm.isPortSet();\r\n    },\r\n    syncSettings(data) {\r\n        this.settings.syncSettings(data);\r\n    },\r\n};\r\nDVEN.environment = Util.getEnviorment();\r\n","import { ThreadComm } from \"threadcomm\";\r\nexport async function InitNexusWorker(DVEN) {\r\n    let parent = \"render\";\r\n    if (DVEN.environment == \"node\") {\r\n        parent = \"server\";\r\n    }\r\n    await ThreadComm.$INIT(\"nexus\", parent);\r\n    await DVEN.UTIL.createPromiseCheck({ check: DVEN.isReady, checkInterval: 1 });\r\n}\r\n","import { ThreadComm } from \"threadcomm\";\r\nimport { DVEN } from \"../../DivineVoxelEngineNexus.js\";\r\nconst parentComm = ThreadComm.parent;\r\nparentComm.listenForMessage(\"sync-settings\", (data, event) => {\r\n    const settings = data[1];\r\n    DVEN.syncSettings(settings);\r\n});\r\nexport const ParentComm = parentComm;\r\n","import { ThreadComm } from \"threadcomm\";\r\nconst worldComm = ThreadComm.createComm(\"world\");\r\nexport const WorldComm = worldComm;\r\n","export * from \"./DivineVoxelEngineNexus.js\";\r\n","export const ColliderManager = {\r\n    colliders: {},\r\n    registerCollider(collider) {\r\n        this.colliders[collider.id] = collider;\r\n    },\r\n    getCollider(id) {\r\n        const collider = this.colliders[id];\r\n        if (!collider) {\r\n            throw new Error(`Collider with ${id} does not exists.`);\r\n        }\r\n        return collider;\r\n    },\r\n};\r\n","//default colliders\r\nimport { BoxCollider } from \"../default/Box/Box.collider.js\";\r\nimport { StairCollider } from \"../default/Stair/Stair.collider.js\";\r\nexport function RegisterDefaultColliders(colliders) {\r\n    colliders.registerCollider(BoxCollider);\r\n    colliders.registerCollider(StairCollider);\r\n}\r\n","const collisionReturn = [\r\n    {\r\n        name: \"main\",\r\n        boundingBox: {\r\n            w: 1,\r\n            h: 1,\r\n            d: 1,\r\n        },\r\n        position: [0, 0, 0],\r\n    },\r\n];\r\nexport const BoxCollider = {\r\n    id: \"#dve_box\",\r\n    getColliderData(x, y, z) {\r\n        collisionReturn[0].position[0] = x;\r\n        collisionReturn[0].position[1] = y;\r\n        collisionReturn[0].position[2] = z;\r\n        return collisionReturn;\r\n    },\r\n};\r\n","const collisionReturn = [\r\n    {\r\n        name: \"stair-bottom\",\r\n        boundingBox: {\r\n            w: 1,\r\n            h: 0.5,\r\n            d: 1,\r\n        },\r\n        position: [0, 0, 0],\r\n    },\r\n    {\r\n        name: \"stair-top\",\r\n        boundingBox: {\r\n            w: 1,\r\n            h: 0.5,\r\n            d: 0.5,\r\n        },\r\n        position: [0, 0, 0],\r\n    },\r\n];\r\nexport const StairCollider = {\r\n    id: \"#dve_stair\",\r\n    getColliderData(x, y, z) {\r\n        collisionReturn[0].position[0] = x;\r\n        collisionReturn[0].position[1] = y;\r\n        collisionReturn[0].position[2] = z;\r\n        collisionReturn[1].position[0] = x;\r\n        collisionReturn[1].position[1] = y + .5;\r\n        collisionReturn[1].position[2] = z;\r\n        return collisionReturn;\r\n    },\r\n};\r\n","export const CollisionsHanlder = {\r\n    sweepAABB(\r\n    //entity \r\n    ax, ay, az, ahx, ahy, ahz, \r\n    //position\r\n    bx, by, bz, \r\n    //collider\r\n    bhx, bhy, bhz, \r\n    //velocity\r\n    dx, dy, dz) {\r\n        var mx, my, mz, mhx, mhy, mhz;\r\n        mx = bx - (ax + ahx);\r\n        my = by - (ay + ahy);\r\n        mz = bz - (az + ahz);\r\n        mhx = ahx + bhx;\r\n        mhy = ahy + bhy;\r\n        mhz = ahz + bhz;\r\n        var h = 1, s, nx = 0, ny = 0, nz = 0;\r\n        // X min\r\n        s = this.lineToPlane(0, 0, 0, dx, dy, dz, mx, my, mz, -1, 0, 0);\r\n        if (s >= 0 &&\r\n            dx > 0 &&\r\n            s < h &&\r\n            this.between(s * dy, my, my + mhy) &&\r\n            this.between(s * dz, mz, mz + mhz)) {\r\n            h = s;\r\n            nx = -1;\r\n            ny = 0;\r\n            nz = 0;\r\n        }\r\n        // X max\r\n        s = this.lineToPlane(0, 0, 0, dx, dy, dz, mx + mhx, my, mz, 1, 0, 0);\r\n        if (s >= 0 &&\r\n            dx < 0 &&\r\n            s < h &&\r\n            this.between(s * dy, my, my + mhy) &&\r\n            this.between(s * dz, mz, mz + mhz)) {\r\n            h = s;\r\n            nx = 1;\r\n            ny = 0;\r\n            nz = 0;\r\n        }\r\n        // Y min\r\n        s = this.lineToPlane(0, 0, 0, dx, dy, dz, mx, my, mz, 0, -1, 0);\r\n        if (s >= 0 &&\r\n            dy > 0 &&\r\n            s < h &&\r\n            this.between(s * dx, mx, mx + mhx) &&\r\n            this.between(s * dz, mz, mz + mhz)) {\r\n            h = s;\r\n            nx = 0;\r\n            ny = -1;\r\n            nz = 0;\r\n        }\r\n        // Y max\r\n        s = this.lineToPlane(0, 0, 0, dx, dy, dz, mx, my + mhy, mz, 0, 1, 0);\r\n        if (s >= 0 &&\r\n            dy < 0 &&\r\n            s < h &&\r\n            this.between(s * dx, mx, mx + mhx) &&\r\n            this.between(s * dz, mz, mz + mhz)) {\r\n            h = s;\r\n            nx = 0;\r\n            ny = 1;\r\n            nz = 0;\r\n        }\r\n        // Z min\r\n        s = this.lineToPlane(0, 0, 0, dx, dy, dz, mx, my, mz, 0, 0, -1);\r\n        if (s >= 0 &&\r\n            dz > 0 &&\r\n            s < h &&\r\n            this.between(s * dx, mx, mx + mhx) &&\r\n            this.between(s * dy, my, my + mhy)) {\r\n            h = s;\r\n            nx = 0;\r\n            ny = 0;\r\n            nz = -1;\r\n        }\r\n        // Z max\r\n        s = this.lineToPlane(0, 0, 0, dx, dy, dz, mx, my, mz + mhz, 0, 0, 1);\r\n        if (s >= 0 &&\r\n            dz < 0 &&\r\n            s < h &&\r\n            this.between(s * dx, mx, mx + mhx) &&\r\n            this.between(s * dy, my, my + mhy)) {\r\n            h = s;\r\n            nx = 0;\r\n            ny = 0;\r\n            nz = 1;\r\n        }\r\n        return { h: h, nx: nx, ny: ny, nz: nz };\r\n    },\r\n    lineToPlane(px, py, pz, ux, uy, uz, vx, vy, vz, nx, ny, nz) {\r\n        var NdotU = nx * ux + ny * uy + nz * uz;\r\n        if (NdotU == 0)\r\n            return Infinity;\r\n        // return n.(v-p) / n.u\r\n        return (nx * (vx - px) + ny * (vy - py) + nz * (vz - pz)) / NdotU;\r\n    },\r\n    between(x, a, b) {\r\n        return x >= a && x <= b;\r\n    },\r\n};\r\n","//objects\r\nimport { VoxelMath } from \"divine-voxel-engine/Math/index.js\";\r\nimport { CollisionsHanlder } from \"./Collisions/CollisionsHandler.js\";\r\nimport { ColliderManager } from \"./Colliders/ColliderManager.js\";\r\nimport { DataTool } from \"divine-voxel-engine/Tools/Data/DataTool.js\";\r\n//functions\r\nimport { RegisterDefaultColliders } from \"./Colliders/Functions/RegisterDefaultColliders.js\";\r\nexport const DVP = {\r\n    math: VoxelMath,\r\n    collisions: CollisionsHanlder,\r\n    colliders: ColliderManager,\r\n    _dataTool: new DataTool(),\r\n    getCollider(x, y, z, dimension = 0) {\r\n        if (!this._dataTool.loadInAt(x, y, z))\r\n            return false;\r\n        if (!this._dataTool.checkCollisions())\r\n            return false;\r\n        if (this._dataTool.getSubstance() == \"#dve_liquid\")\r\n            return false;\r\n        let collider = this._dataTool.getCollider();\r\n        return this.colliders.getCollider(collider != \"none\" ? collider : \"Box\");\r\n    },\r\n};\r\nRegisterDefaultColliders(DVP.colliders);\r\n","import { Vector3 } from \"divine-voxel-engine/Math/index.js\";\r\nimport { DataTool } from \"divine-voxel-engine/Tools/Data/DataTool.js\";\r\nimport { DVP } from \"../DivineVoxelPhysics.js\";\r\nconst ep = 0.001;\r\nexport class EntityBase {\r\n    dataTool = new DataTool();\r\n    active = true;\r\n    onGround = false;\r\n    position = new Vector3(0, 0, 0);\r\n    previousPosiiton = new Vector3(0, 0, 0);\r\n    direction = new Vector3(0, 0, 0);\r\n    speed = 0.01;\r\n    velocity = new Vector3(0, 0, 0);\r\n    hitBox = { w: 0.8, h: 1.8, d: 0.8 };\r\n    setPosition(x, y, z) {\r\n        this.position.updateVector(x, y, z);\r\n    }\r\n    syncPosition(position) {\r\n        position.x = this.position.x;\r\n        position.y = this.position.y;\r\n        position.z = this.position.z;\r\n    }\r\n    cachePosition() {\r\n        this.previousPosiiton.updateFromVec3(this.position);\r\n    }\r\n    setVelocity(x, y, z) {\r\n        this.velocity.updateVector(x, y, z);\r\n    }\r\n    applyVelocity() {\r\n        this.position.addFromVec3(this.velocity);\r\n    }\r\n    update() {\r\n        if (!this.active)\r\n            return;\r\n        this.beforeUpdate();\r\n        this.cachePosition();\r\n        this.applyVelocity();\r\n        this.onGround = false;\r\n        //Notice there is a cycle. We may have to run the algorithm several times until the collision is resolved\r\n        while (true) {\r\n            // First we calculate the movement vector for this frame\r\n            // This is the entity's current position minus its last position.\r\n            // The last position is set at the beggining of each frame.\r\n            const dx = this.position.x - this.previousPosiiton.x;\r\n            const dy = this.position.y - this.previousPosiiton.y;\r\n            const dz = this.position.z - this.previousPosiiton.z;\r\n            // These are the bounds of the AABB that may collide with the entity.\r\n            const minX = Math.floor(Math.min(this.position.x, this.previousPosiiton.x) - this.hitBox.w / 2);\r\n            const maxX = Math.floor(Math.max(this.position.x, this.previousPosiiton.x) + this.hitBox.w / 2);\r\n            const minY = Math.floor(Math.min(this.position.y, this.previousPosiiton.y) - this.hitBox.h / 2);\r\n            const maxY = Math.floor(Math.max(this.position.y, this.previousPosiiton.y) + this.hitBox.h / 2);\r\n            const minZ = Math.floor(Math.min(this.position.z, this.previousPosiiton.z) - this.hitBox.d / 2);\r\n            const maxZ = Math.floor(Math.max(this.position.z, this.previousPosiiton.z) + this.hitBox.d / 2);\r\n            let r = { h: 1, nx: 0, ny: 0, nz: 0 };\r\n            // For each voxel that may collide with the entity, find the first that colides with it\r\n            for (let y = minY; y <= maxY; y++) {\r\n                for (let z = minZ; z <= maxZ; z++) {\r\n                    for (let x = minX; x <= maxX; x++) {\r\n                        if (!this.dataTool.loadInAt(x, y, z))\r\n                            continue;\r\n                        const colliderObject = DVP.getCollider(x, y, z);\r\n                        if (!colliderObject)\r\n                            continue;\r\n                        const colliders = colliderObject.getColliderData(x, y, z);\r\n                        const collidersLength = colliders.length;\r\n                        for (let i = 0; i < collidersLength; i++) {\r\n                            const collider = colliders[i];\r\n                            // Check swept collision\r\n                            const c = DVP.collisions.sweepAABB(this.previousPosiiton.x - this.hitBox.w / 2, this.previousPosiiton.y - this.hitBox.h / 2, this.previousPosiiton.z - this.hitBox.d / 2, this.hitBox.w, this.hitBox.h, this.hitBox.d, collider.position[0], collider.position[1], collider.position[2], collider.boundingBox.w, collider.boundingBox.h, collider.boundingBox.d, dx, dy, dz);\r\n                            if (c.ny == 1 && c.h < 0.3) {\r\n                                this.onGround = true;\r\n                            }\r\n                            if (c.h < 1) {\r\n                                this.doCollision(collider.name, c);\r\n                            }\r\n                            //Check if this collision is closer than the closest so far.\r\n                            if (c.h < r.h) {\r\n                                r = c;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // Update the entity's position\r\n            // We move the entity slightly away from the block in order to miss seams.\r\n            this.position.x = this.previousPosiiton.x + r.h * dx + ep * r.nx;\r\n            this.position.y = this.previousPosiiton.y + r.h * dy + ep * r.ny;\r\n            this.position.z = this.previousPosiiton.z + r.h * dz + ep * r.nz;\r\n            // If there was no collision, end the algorithm.\r\n            if (r.h == 1)\r\n                break;\r\n            // Wall Sliding\r\n            // c = a - (a.b)/(b.b) b\r\n            // c - slide vector (rejection of a over b)\r\n            // b - normal to the block\r\n            // a - remaining speed (= (1-h)*speed)\r\n            const BdotB = r.nx * r.nx + r.ny * r.ny + r.nz * r.nz;\r\n            if (BdotB != 0) {\r\n                // Store the current position for the next iteration\r\n                this.cachePosition();\r\n                // Apply Slide\r\n                const AdotB = (1 - r.h) * (dx * r.nx + dy * r.ny + dz * r.nz);\r\n                this.position.x += (1 - r.h) * dx - (AdotB / BdotB) * r.nx;\r\n                this.position.y += (1 - r.h) * dy - (AdotB / BdotB) * r.ny;\r\n                this.position.z += (1 - r.h) * dz - (AdotB / BdotB) * r.nz;\r\n            }\r\n        }\r\n        this.afterUpdate();\r\n    }\r\n}\r\n","export * from \"./DivineVoxelPhysics.js\";\r\nexport * from \"./Entities/Entity.base.js\";\r\n","import { PlayerManager } from \"../Data/PlayerManager.js\";\r\nimport { PlayerPhysicsData } from \"../Data/PlayerPhysicsData.js\";\r\nimport { PlayerStatsData } from \"../Data/PlayerStatsData.js\";\r\nimport { $RegisterPlayerData } from \"../Data/RegisterPlayerData.js\";\r\nimport { NexusPlayer } from \"./NexusPlayer.js\";\r\nasync function SetUpPlayerData(DVEN) {\r\n    const { playerPhysicsTagManager, playerStatesTagManger } = $RegisterPlayerData();\r\n    const physicsRemoteData = playerPhysicsTagManager.initData;\r\n    const playePhysicsrDataSAB = new SharedArrayBuffer(physicsRemoteData.bufferSize);\r\n    playerPhysicsTagManager.setBuffer(playePhysicsrDataSAB);\r\n    PlayerManager.physics = new PlayerPhysicsData(playePhysicsrDataSAB, physicsRemoteData);\r\n    const statsRemoteData = playerStatesTagManger.initData;\r\n    const playeStatsDataSAB = new SharedArrayBuffer(physicsRemoteData.bufferSize);\r\n    playerPhysicsTagManager.setBuffer(playePhysicsrDataSAB);\r\n    PlayerManager.stats = new PlayerStatsData(playeStatsDataSAB, statsRemoteData);\r\n    let renderReady = false;\r\n    let worldReady = false;\r\n    DVEN.parentComm.listenForMessage(\"request-player-tags\", (data) => {\r\n        DVEN.parentComm.sendMessage(\"connect-player-tags\", [\r\n            playePhysicsrDataSAB,\r\n            physicsRemoteData,\r\n            playeStatsDataSAB,\r\n            statsRemoteData,\r\n        ]);\r\n        renderReady = true;\r\n    });\r\n    DVEN.worldComm.listenForMessage(\"request-player-tags\", (data) => {\r\n        DVEN.worldComm.sendMessage(\"connect-player-tags\", [\r\n            playePhysicsrDataSAB,\r\n            physicsRemoteData,\r\n            playeStatsDataSAB,\r\n            statsRemoteData,\r\n        ]);\r\n        worldReady = true;\r\n    });\r\n    await DVEN.UTIL.createPromiseCheck({\r\n        checkInterval: 1,\r\n        check: () => {\r\n            return renderReady && worldReady;\r\n        },\r\n    });\r\n}\r\nexport const INIT_NEXUS_PLAYER = async (DVEN) => {\r\n    await SetUpPlayerData(DVEN);\r\n    const player = new NexusPlayer(PlayerManager.physics, PlayerManager.stats);\r\n    return player;\r\n};\r\n","import { EntityBase } from \"dve-plugins-physics/Nexus/index.js\";\r\nimport { Vector3 } from \"divine-voxel-engine/Math/index.js\";\r\nimport { PlayerPhysicsStatesValues, } from \"../Data/PlayerPhysicsData.js\";\r\nexport class NexusPlayer extends EntityBase {\r\n    physics;\r\n    stats;\r\n    states = {\r\n        cilmbingStair: false,\r\n        inWater: false,\r\n        onLadder: false,\r\n        gravity: -0.1,\r\n        jumpMaxDefault: 10,\r\n    };\r\n    msterialStandingOn = \"none\";\r\n    finalDirection = new Vector3(0, 0, 0);\r\n    sideDirection = new Vector3(0, 0, 0);\r\n    speed = 0.04;\r\n    runSpeed = 0.03;\r\n    hitBox = { w: 0.8, h: 1.8, d: 0.8 };\r\n    jumpStates = {\r\n        count: 0,\r\n        max: 10,\r\n        jumping: false,\r\n        canJump: true,\r\n    };\r\n    movementFunctions = {};\r\n    gravityAcceleration = 0;\r\n    constructor(physics, stats) {\r\n        super();\r\n        this.physics = physics;\r\n        this.stats = stats;\r\n        this.movementFunctions[PlayerPhysicsStatesValues.still] = () => {\r\n            this.direction.scaleXYZ(0);\r\n        };\r\n        this.movementFunctions[PlayerPhysicsStatesValues.secondaryStill] = () => {\r\n            this.sideDirection.scaleXYZ(0);\r\n        };\r\n        this.movementFunctions[PlayerPhysicsStatesValues.walkingForward] = () => { };\r\n        this.movementFunctions[PlayerPhysicsStatesValues.walkingBackward] = () => {\r\n            this.direction.scaleXYZ(-1);\r\n        };\r\n        this.movementFunctions[PlayerPhysicsStatesValues.walkingLeft] = () => { };\r\n        this.movementFunctions[PlayerPhysicsStatesValues.walkingRight] = () => {\r\n            this.sideDirection.scaleXYZ(-1);\r\n        };\r\n    }\r\n    $INIT() {\r\n        this.setPosition(10, 80, 7);\r\n        this.cachePosition();\r\n        this.velocity.y = this.states.gravity;\r\n        //@ts-ignore\r\n        this.syncPosition(PlayerManager.physics.position);\r\n    }\r\n    controlsUpdate() {\r\n        //reset direction\r\n        this.finalDirection.scaleXYZ(0);\r\n        //get forward direction from where the player is looking\r\n        this.direction.updateVector(this.physics.direction.x, 0, this.physics.direction.z);\r\n        this.direction.normalize();\r\n        //get side direction from where the player is looking\r\n        this.sideDirection.updateVector(this.physics.sideDirection.x, 0, this.physics.sideDirection.z);\r\n        this.sideDirection.normalize();\r\n        //apply any changes on the direction vector based on player's state\r\n        this.movementFunctions[this.physics.states.movement]();\r\n        this.movementFunctions[this.physics.states.secondaryMovement]();\r\n        //finally add, nomalize, then scale\r\n        this.finalDirection.addFromVec3(this.direction);\r\n        this.finalDirection.addFromVec3(this.sideDirection);\r\n        if (!this.finalDirection.isZero()) {\r\n            this.finalDirection.normalize();\r\n        }\r\n        this.finalDirection.scaleXYZ(this.getSpeed());\r\n        //set the player's velcoity based on their state\r\n        if (this.physics.states.movement || this.physics.states.secondaryMovement) {\r\n            this.velocity.x = this.finalDirection.x;\r\n            this.velocity.z = this.finalDirection.z;\r\n        }\r\n        if (this.onGround || this.states.inWater) {\r\n            this.gravityAcceleration = 0;\r\n        }\r\n        if (this.onGround) {\r\n            this.velocity.y = this.states.gravity;\r\n        }\r\n        //player jump\r\n        if (this.physics.states.jumping &&\r\n            !this.jumpStates.jumping &&\r\n            (this.onGround || this.states.inWater)) {\r\n            this.jumpStates.jumping = true;\r\n            this.jumpStates.max = this.states.jumpMaxDefault;\r\n            this.velocity.y = 0.1 + this.stats.jumpPower / 1000;\r\n            this.physics.states.jumping = 0;\r\n        }\r\n        if (this.jumpStates.jumping) {\r\n            if (this.jumpStates.count >= this.jumpStates.max) {\r\n                this.jumpStates.count = 0;\r\n                this.jumpStates.jumping = false;\r\n            }\r\n            else {\r\n                this.jumpStates.count++;\r\n            }\r\n        }\r\n        //player in air or water\r\n        if (!this.onGround && !this.jumpStates.jumping) {\r\n            this.gravityAcceleration += 0.0025;\r\n            if (this.states.inWater) {\r\n                this.velocity.y -= 0.0025;\r\n                if (this.velocity.y < -0.01) {\r\n                    this.velocity.y = -0.01;\r\n                }\r\n            }\r\n            else {\r\n                if (this.velocity.y <= this.states.gravity) {\r\n                    this.velocity.y = this.states.gravity;\r\n                }\r\n                this.velocity.y -= this.gravityAcceleration;\r\n            }\r\n        }\r\n    }\r\n    getSpeed() {\r\n        return (this.physics.states.running * this.runSpeed +\r\n            //for every level of speed add a tenth of the player's base speed\r\n            (this.speed + this.stats.speed * this.speed * 0.1));\r\n    }\r\n    beforeUpdate() {\r\n        this.states.inWater = false;\r\n        for (let y = this.position.y; y <= this.position.y + 1; y++) {\r\n            for (let x = this.position.x - 1; x <= this.position.x + 1; x++) {\r\n                for (let z = this.position.z - 1; z <= this.position.z + 1; z++) {\r\n                    if (this.dataTool.loadInAt(x >> 0, y >> 0, z >> 0)) {\r\n                        if (this.dataTool.getSubstance() == \"#dve_liquid\") {\r\n                            this.states.inWater = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.controlsUpdate();\r\n        if (this.onGround) {\r\n            if (this.dataTool.loadInAt(this.position.x >> 0, (this.position.y - 1) >> 0, this.position.z >> 0)) {\r\n                let material = this.dataTool.getMaterial();\r\n                if (material != this.msterialStandingOn) {\r\n                    this.msterialStandingOn = material;\r\n                }\r\n            }\r\n        }\r\n        this.physics.states.onGround = this.onGround;\r\n        this.physics.states.inWater = this.states.inWater;\r\n        if (this.states.cilmbingStair) {\r\n            this.setVelocity(0, 1, -1.5);\r\n            this.velocity.scaleXYZ(this.getSpeed());\r\n        }\r\n        this.states.cilmbingStair = false;\r\n    }\r\n    afterUpdate() {\r\n        //@ts-ignore\r\n        this.syncPosition(this.physics.position);\r\n    }\r\n    doCollision(colliderName, collisionData) {\r\n        if ((colliderName == \"stair-bottom\" || colliderName == \"stair-top\") &&\r\n            collisionData.h < 0.3) {\r\n            if (collisionData.nz == 1) {\r\n                this.states.cilmbingStair = true;\r\n                return;\r\n            }\r\n            if (collisionData.ny == 1) {\r\n                this.states.cilmbingStair = false;\r\n                return;\r\n            }\r\n        }\r\n        this.states.cilmbingStair = false;\r\n    }\r\n}\r\n","export * from \"./InitNexusPlayer.js\";\r\nexport * from \"./NexusPlayer.js\";\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = () => {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [\"DSLIBS_divineVoxelEngine_dist_Data_Settings_EngineSettings_js-DSLIBS_threadComm_dist_index_js\",\"DSLIBS_divineVoxelEngine_dist_Common_Threads_Contracts_DataSync_js-DSLIBS_divineVoxelEngine_d-d7fdd9\",\"DSLIBS_divineVoxelEngine_dist_Math_index_js\",\"DSLIBS_dvePlugIns_Player_dist_Data_PlayerManager_js-DSLIBS_dvePlugIns_Player_dist_Data_Regist-d31b5c\"], () => (__webpack_require__(\"./compiled/client/Nexus/nexus.js\")))\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","var webpackQueues = typeof Symbol === \"function\" ? Symbol(\"webpack queues\") : \"__webpack_queues__\";\nvar webpackExports = typeof Symbol === \"function\" ? Symbol(\"webpack exports\") : \"__webpack_exports__\";\nvar webpackError = typeof Symbol === \"function\" ? Symbol(\"webpack error\") : \"__webpack_error__\";\nvar resolveQueue = (queue) => {\n\tif(queue && !queue.d) {\n\t\tqueue.d = 1;\n\t\tqueue.forEach((fn) => (fn.r--));\n\t\tqueue.forEach((fn) => (fn.r-- ? fn.r++ : fn()));\n\t}\n}\nvar wrapDeps = (deps) => (deps.map((dep) => {\n\tif(dep !== null && typeof dep === \"object\") {\n\t\tif(dep[webpackQueues]) return dep;\n\t\tif(dep.then) {\n\t\t\tvar queue = [];\n\t\t\tqueue.d = 0;\n\t\t\tdep.then((r) => {\n\t\t\t\tobj[webpackExports] = r;\n\t\t\t\tresolveQueue(queue);\n\t\t\t}, (e) => {\n\t\t\t\tobj[webpackError] = e;\n\t\t\t\tresolveQueue(queue);\n\t\t\t});\n\t\t\tvar obj = {};\n\t\t\tobj[webpackQueues] = (fn) => (fn(queue));\n\t\t\treturn obj;\n\t\t}\n\t}\n\tvar ret = {};\n\tret[webpackQueues] = x => {};\n\tret[webpackExports] = dep;\n\treturn ret;\n}));\n__webpack_require__.a = (module, body, hasAwait) => {\n\tvar queue;\n\thasAwait && ((queue = []).d = 1);\n\tvar depQueues = new Set();\n\tvar exports = module.exports;\n\tvar currentDeps;\n\tvar outerResolve;\n\tvar reject;\n\tvar promise = new Promise((resolve, rej) => {\n\t\treject = rej;\n\t\touterResolve = resolve;\n\t});\n\tpromise[webpackExports] = exports;\n\tpromise[webpackQueues] = (fn) => (queue && fn(queue), depQueues.forEach(fn), promise[\"catch\"](x => {}));\n\tmodule.exports = promise;\n\tbody((deps) => {\n\t\tcurrentDeps = wrapDeps(deps);\n\t\tvar fn;\n\t\tvar getResult = () => (currentDeps.map((d) => {\n\t\t\tif(d[webpackError]) throw d[webpackError];\n\t\t\treturn d[webpackExports];\n\t\t}))\n\t\tvar promise = new Promise((resolve) => {\n\t\t\tfn = () => (resolve(getResult));\n\t\t\tfn.r = 0;\n\t\t\tvar fnQueue = (q) => (q !== queue && !depQueues.has(q) && (depQueues.add(q), q && !q.d && (fn.r++, q.push(fn))));\n\t\t\tcurrentDeps.map((dep) => (dep[webpackQueues](fnQueue)));\n\t\t});\n\t\treturn fn.r ? promise : getResult();\n\t}, (err) => ((err ? reject(promise[webpackError] = err) : outerResolve(exports)), resolveQueue(queue)));\n\tqueue && (queue.d = 0);\n};","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".DVE.js\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t\"compiled_client_Nexus_nexus_js\": 1\n};\n\n// importScripts chunk loading\nvar installChunk = (data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkdve_testing\"] = self[\"webpackChunkdve_testing\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = () => {\n\treturn Promise.all([\"DSLIBS_divineVoxelEngine_dist_Data_Settings_EngineSettings_js-DSLIBS_threadComm_dist_index_js\",\"DSLIBS_divineVoxelEngine_dist_Common_Threads_Contracts_DataSync_js-DSLIBS_divineVoxelEngine_d-d7fdd9\",\"DSLIBS_divineVoxelEngine_dist_Math_index_js\",\"DSLIBS_dvePlugIns_Player_dist_Data_PlayerManager_js-DSLIBS_dvePlugIns_Player_dist_Data_Regist-d31b5c\"].map(__webpack_require__.e, __webpack_require__)).then(next);\n};","","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n",""],"names":[],"sourceRoot":""}