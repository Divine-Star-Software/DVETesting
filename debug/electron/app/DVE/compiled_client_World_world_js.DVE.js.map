{"version":3,"file":"compiled_client_World_world_js.DVE.js","mappings":";;;;;;;;;;;;;;;;AAAiD;AACN;AACpC;AACP,wBAAwB,mEAA8B;AACtD,qBAAqB,uEAAgB;AACrC,kBAAkB,oEAAa;AAC/B,IAAI,4EAAqB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,+EAAwB;AAChC;AACA,KAAK;AACL,IAAI,4EAAqB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,+EAAwB;AACpC;AACA;AACA,KAAK;AACL;;;;;;;;;;;;;;;;;AC9BiD;AACX;AAC/B;AACP;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,sEAAe;AACnC,kBAAkB,wEAAiB;AACnC,yBAAyB,UAAU;AACnC,6BAA6B,UAAU;AACvC,YAAY,mEAA4B;AACxC;AACA;AACA;AACA;AACA,yBAAyB,UAAU;AACnC,6BAA6B,UAAU;AACvC;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACvBiD;AACjD,cAAc,oEAAa;AACpB;AACP;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,8BAA8B;AAC3D;AACA,iCAAiC,8BAA8B;AAC/D,gCAAgC,sBAAsB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,6BAA6B,8BAA8B;AAC3D,iCAAiC,8BAA8B;AAC/D,gCAAgC,sBAAsB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,6BAA6B,8BAA8B;AAC3D,iCAAiC,8BAA8B;AAC/D,gCAAgC,oBAAoB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,6BAA6B,8BAA8B;AAC3D,iCAAiC,8BAA8B;AAC/D,gCAAgC,oBAAoB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;;;;;;;;;;;;;;AC/LO;AACP,cAAc;AACd;AACA,eAAe;AACf;AACA;AACA;AACA,KAAK;AACL;;;;;;;;;;;;;;;;;;ACRyC;AACQ;AACE;AAC5C;AACP,cAAc;AACd;AACA,cAAc,+DAAa;AAC3B,KAAK;AACL;AACA,QAAQ,8EAAuB;AAC/B,QAAQ,8EAAuB;AAC/B,QAAQ,oEAA+B;AACvC,QAAQ,iEAA4B;AACpC;AACA,SAAS;AACT,QAAQ,uDAAkB;AAC1B,KAAK;AACL,oBAAoB;AACpB;;;;;;;;;;;;;;;;;;;;;;;AClBwC;AACS;AAC4C;AAC7F,WAAW,mBAAmB;AAC+B;AACpB;AACW;AACN;AACe;AACtD;AACP,IAAI,6DAAoB;AACxB;AACA;AACA,gBAAgB,4EAAqB;AACrC;AACA;AACA,oBAAoB,8DAAqB;AACzC;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB,iBAAiB;AACjB,gBAAgB,4EAAqB;AACrC,oBAAoB,uEAAsB;AAC1C,iBAAiB;AACjB,gBAAgB,mGAAiB,CAAC,2DAAI;AACtC,sBAAsB,iEAAU;AAChC,sBAAsB,yDAAoB;AAC1C,0CAA0C,2EAAiB,CAAC,2DAAI;AAChE,gBAAgB,4DAAoB;AACpC,gBAAgB,mEAAkB;AAClC,gBAAgB,yEAAe;AAC/B,gBAAgB,8DAAqB;AACrC,aAAa;AACb,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,gBAAgB,8DAAqB;AACrC,aAAa;AACb,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,sBAAsB,oEAAmB;AACzC;AACA,gBAAgB,8DAAqB;AACrC,aAAa;AACb,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,gBAAgB,yEAAwB;AACxC,aAAa;AACb,SAAS;AACT,KAAK;AACL;AACA,eAAe,4DAAW;;;;;;;;;;;;;;;;;AC7DqD;AAC5B;AAC5C,iBAAiB,4EAAa;AACrC;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA,oBAAoB,6BAA6B;AACjD;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA,oBAAoB,6BAA6B;AACjD;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,KAAK;AACL,CAAC;AACD;AACA,gEAAmB;;;;;;;;;;;;;;AClC8B;AACjD,MAAM,uEAAqB;;;;;;;;;;;;;;;;;ACDpB;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;;;;;;;;;;AC/NA;;;;;;;;;;;;;;ACAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,eAAe,2BAA2B,2BAA2B;AAC9G;AACA;AACA,yCAAyC,eAAe,8BAA8B,cAAc,eAAe,4BAA4B;AAC/I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,eAAe,2BAA2B,2BAA2B;AAC9G;AACA;AACA,yCAAyC,eAAe,8BAA8B,cAAc,eAAe,4BAA4B;AAC/I;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACtEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;;;;;;;;;;;;;;;;;AChC6C;AACI;AAC1C;AACP,WAAW,kEAAsB;AACjC;AACO;AACP,eAAe,0DAAY;AAC3B;;;;;;;;;;;;;;;;;ACPA;AACqD;AACuB;AAC5E;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA,gBAAgB,mEAAY,eAAe,mGAA+B;AAC1E,gBAAgB,mEAAY,eAAe,mGAA+B;AAC1E,KAAK;AACL,cAAc,mEAAY,cAAc,6FAAyB;AACjE;AACA,eAAe,mEAAY,uBAAuB,gGAA4B;AAC9E,eAAe,mEAAY,uBAAuB,+FAA2B;AAC7E,KAAK;AACL;AACA,gBAAgB,mEAAY,eAAe,mGAA+B;AAC1E,gBAAgB,mEAAY,eAAe,mGAA+B;AAC1E,KAAK;AACL;AACA,aAAa,mEAAY,cAAc,8FAA0B;AACjE,KAAK;AACL;AACA,gBAAgB,mEAAY,gBAAgB,+FAA2B;AACvE,gBAAgB,mEAAY,gBAAgB,+FAA2B;AACvE,KAAK;AACL;AACA,eAAe,mEAAY,gBAAgB,+FAA2B;AACtE,KAAK;AACL,cAAc,mEAAY,cAAc,6FAAyB;AACjE;AACO;;;;;;;;;;;;;;;;;;;AChG4D;AACiC;AAC5D;AACsB;AAC9D,cAAc,uEAAY;AACnB;AACP;AACA;AACA,mBAAmB,gEAAwB,CAAC,0HAA0C;AACtF,gBAAgB,2FAAiC;AACjD,aAAa;AACb,SAAS;AACT,KAAK;AACL;AACA;AACA,oBAAoB,gEAAwB,CAAC,mIAAmD;AAChG,gBAAgB,0FAAgC;AAChD,aAAa;AACb;AACA,SAAS;AACT;AACA,+BAA+B,gEAAwB,CAAC,4HAA4C;AACpG,gBAAgB,2FAAiC;AACjD;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT,oBAAoB,gEAAwB,CAAC,uHAAuC;AACpF;AACA,+DAA+D;AAC/D,SAAS;AACT,KAAK;AACL;;;;;;;;;;;;;;;ACjCO;AACP;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACNO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACvBO;AACA;AACP;AACA;AACA;AACA;;;;;;;;;;;;;;;ACLO;AACP,gBAAgB;AAChB,8BAA8B;AAC9B;AACA;AACA;AACA,yCAAyC,IAAI;AAC7C;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;;;;;;;;;;;;;;;;;;ACjBA;AACmD;AACnD;AACuC;AACc;AACrD,cAAc,iEAAY;AACnB;AACP,gBAAgB,8DAAU,KAAK,gDAAS;AACxC;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,KAAK;AACL;AACA;;;;;;;;;;;;;;;;;;;;AClDwD;AACQ;AACE;AACI;AACF;AAC7D,wBAAwB,4EAAiB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,6DAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,2FAAkC;AACzD;AACA;AACA,mBAAmB,2FAAkC;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,iFAAwB;AAChC;AACA;AACA;AACA,QAAQ,iFAAwB;AAChC;AACA;AACA;AACA,QAAQ,oFAA0B;AAClC;AACA;AACA;AACA,QAAQ,qFAA2B;AACnC;AACA;AACA;;;;;;;;;;;;;;;;;;;;AC/FkE;AACC;AAC3B;AACqC;AACf;AAC9D,mBAAmB,yDAAiB;AAC7B,0BAA0B,kFAAiB;AAClD,4BAA4B,2EAAa;AACzC,YAAY,uEAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA,qFAAqF;AACrF;AACA;AACA;AACA,uBAAuB,kFAAwB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAyB;AACjC;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AC5CuF;AAC/C;AACuB;AACG;AACE;AACJ;AACO;AACnB;AAC7C,6BAA6B,4EAAiB;AACrD,gCAAgC,wEAAc;AAC9C;AACA,qBAAqB,0DAAkB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,0DAAkB;AACvC;AACA;AACA;AACA;AACA;AACA,oBAAoB,+FAAiC;AACrD,QAAQ,iFAAiC;AACzC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,iBAAiB,gGAAwB;AACzC;AACA;AACA,iBAAiB;AACjB;AACA;AACA,2BAA2B,qGAA6B;AACxD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,wBAAwB,sFAA4B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,yEAAU;AACpC;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,wBAAwB,sFAA4B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AClNmF;AAC3C;AAC0B;AACb;AACiC;AACxB;AACvD;AACP;AACA;AACA;A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;AACG;AACyB;AAC1C;AAC6B;AACA;AACpB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,sBAAsB,iFAAkB;AACxC,aAAa;AACb,mBAAmB;AACnB;AACA;AACA;AACA,QAAQ,kFAAqB;AAC7B,QAAQ,sEAAkB;AAC1B,QAAQ,wEAAmB;AAC3B,QAAQ,wEAAmB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,sBAAsB,0FAAuB;AAC7C;AACA;AACA,kCAAkC,yGAA+B;AACjE;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA,sBAAsB,sFAAmB;AACzC;AACA;AACA,0BAA0B,iFAAuB;AACjD;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA,sBAAsB,uFAAoB;AAC1C;AACA;AACA,2BAA2B,kFAAwB;AACnD;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA,sBAAsB,uFAAoB;AAC1C;AACA;AACA,2BAA2B,kFAAwB;AACnD;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA,sBAAsB,6FAA0B;AAChD;AACA;AACA,iCAAiC,gGAAwB;AACzD;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA,sBAAsB,0FAAuB;AAC7C;AACA;AACA,YAAY,wEAAkB;AAC9B,YAAY,iFAA2B;AACvC;AACA;AACA,KAAK;AACL;AACA,sBAAsB,0FAAuB;AAC7C;AACA,2BAA2B,sEAAsB;AACjD;AACA,KAAK;AACL;AACA,sBAAsB,2FAAwB;AAC9C;AACA,2BAA2B,wEAAuB;AAClD;AACA,KAAK;AACL;AACA,sBAAsB,2FAAwB;AAC9C;AACA,4BAA4B,wEAAuB,EAAE,gFAA+B;AACpF;AACA,KAAK;AACL;AACA,sBAAsB,6FAA0B;AAChD;AACA;AACA,YAAY,kGAAmC;AAC/C,YAAY,8FAA+B;AAC3C;AACA;AACA,KAAK;AACL;AACA,sBAAsB,kGAA+B;AACrD;AACA;AACA;AACA,KAAK;AACL;;;;;;;;;;;;;;;;;;;;;ACtMA;AACuD;AACkB;AACL;AACP;AACa;AACb;AACtD;AACP;AACA;AACA,mCAAmC,mFAA2B;AAC9D;AACA;AACA,QAAQ,2FAAkC;AAC1C;AACA;AACA;AACA;AACA;AACA,wBAAwB,yBAAyB;AACjD,4BAA4B,0FAAiC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,kFAAqB,CAAC,wFAAgC;AAC/E;AACA;AACA,QAAQ,qEAAe;AACvB,QAAQ,yEAAmB;AAC3B;AACA,mCAAmC,mFAA2B;AAC9D,2BAA2B,+FAAsC;AACjE;AACA;AACA,YAAY,2EAAqB;AACjC,YAAY,wFAA2B,CAAC,+DAAS;AACjD;AACA;AACA,0BAA0B,uFAAsB;AAChD;AACA;AACA,yBAAyB,oEAAc;AACvC,yBAAyB,oEAAc;AACvC,yBAAyB,oEAAc;AACvC,oBAAoB,sEAAgB,CAAC,uFAAsB;AAC3D;AACA;AACA,gBAAgB,oFAAuB,YAAY,+DAAS;AAC5D;AACA;AACA,QAAQ,gFAAwB;AAChC,QAAQ,iFAAyB;AACjC,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,0CAA0C,iCAAiC;AAC3E;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,KAAK;AACL;;;;;;;;;;;;;;;;;;;;AClFsD;AACuC;AACxC;AACE;AACA;AAChD;AACP;AACA;AACA;AACA,uBAAuB,2EAAuB;AAC9C;AACA,oDAAoD,qEAAqB;AACzE,YAAY,uEAAuB;AACnC,YAAY,oEAAoB,gBAAgB,4EAAgB;AAChE,YAAY,oEAAoB,mBAAmB,kFAAsB;AACzE;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,uBAAuB,2EAAuB;AAC9C;AACA,oDAAoD,uEAAsB;AAC1E,YAAY,yEAAwB;AACpC,YAAY,sEAAqB,gBAAgB,4EAAgB;AACjE,YAAY,sEAAqB,mBAAmB,mFAAuB;AAC3E;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,uBAAuB,2EAAuB;AAC9C;AACA,oDAAoD,uEAAsB;AAC1E,YAAY,yEAAwB;AACpC,YAAY,sEAAqB,gBAAgB,4EAAgB;AACjE,YAAY,sEAAqB,mBAAmB,mFAAuB;AAC3E;AACA,SAAS;AACT,KAAK;AACL;;;;;;;;;;;;;;;AC1CO;AACP;AACA;AACA;AACA;AACA,0CAA0C,IAAI;AAC9C;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;;;;;;;;;;;;;;;;;;AClB0E;AAC1B;AACN;AACoB;AACvD;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,yBAAyB,0DAAU;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,gBAAgB,yFAAiC;AACjD;AACA,YAAY,mEAAyB;AACrC;AACA;AACA;AACA,oBAAoB,yEAA+B;AACnD;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA,YAAY,sFAAqB;AACjC;AACA;AACA,KAAK;AACL;AACA,YAAY,oFAAmB;AAC/B;AACA;AACA,KAAK;AACL;AACA,YAAY,uFAAsB;AAClC;AACA;AACA,KAAK;AACL;AACA,YAAY,4FAA2B;AACvC;AACA;AACA,KAAK;AACL;AACA,YAAY,qFAAoB;AAChC;AACA;AACA,KAAK;AACL;AACA,YAAY,0FAAyB;AACrC;AACA;AACA,KAAK;AACL;AACA,YAAY,uFAAsB;AAClC;AACA;AACA;AACA,KAAK;AACL;AACA,YAAY,mFAAkB;AAC9B;AACA;AACA,KAAK;AACL;AACA,YAAY,qFAAoB;AAChC;AACA;AACA;AACA,KAAK;AACL;;;;;;;;;;;;;;;;;;;;;AC3KmE;AACnB;AACiB;AACiB;AACR;AACnE,0BAA0B,0DAAU;AAC3C;AACA,QAAQ,2FAAsB;AAC9B;AACA;AACA,CAAC;AACD;AACA,QAAQ,6FAAwB;AAChC;AACA;AACA,CAAC;AACD;AACA,QAAQ,gGAA2B;AACnC;AACA;AACA,CAAC;AACD;AACA,QAAQ,8FAAyB;AACjC;AACA;AACA,CAAC;AACD;AACA,QAAQ,8FAAyB;AACjC;AACA;AACA,CAAC;AACD;AACA,QAAQ,8FAAyB;AACjC;AACA;AACA,CAAC;AACD;AACA,QAAQ,sFAAqB;AAC7B;AACA;AACA,CAAC;AACD;AACA,QAAQ,sFAAqB;AAC7B;AACA;AACA,CAAC;AACM;AACP;AACA,YAAY,sFAAqB;AACjC;AACA;AACA,gBAAgB,iFAAyB;AACzC,KAAK;AACL;AACA,YAAY,2FAA0B;AACtC;AACA;AACA,gBAAgB,mFAA2B;AAC3C,KAAK;AACL;AACA,YAAY,8FAA6B;AACzC;AACA;AACA,gBAAgB,mFAA2B;AAC3C,KAAK;AACL;AACA,YAAY,8FAA6B;AACzC;AACA;AACA,gBAAgB,mFAA2B;AAC3C,KAAK;AACL;AACA,YAAY,oGAAmC;AAC/C;AACA;AACA,gBAAgB,mFAA2B;AAC3C,KAAK;AACL;AACA;AACA,KAAK;AACL,IAAI,2EAAe;AACnB;;;;;;;;;;;;;;;;;;;ACjFgD;AACsB;AACY;AAC3E,2BAA2B,0DAAU;AAC5C;AACA,QAAQ,2FAAsB;AAC9B;AACA;AACA,CAAC;AACD;AACA,QAAQ,6FAAwB;AAChC;AACA;AACA,CAAC;AACD;AACA,QAAQ,gGAA2B;AACnC;AACA;AACA,CAAC;AACD;AACA,QAAQ,8FAAyB;AACjC;AACA;AACA,CAAC;AACD;AACA,QAAQ,8FAAyB;AACjC;AACA;AACA,CAAC;AACD;AACA,QAAQ,8FAAyB;AACjC;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,CAAC;AACM;AACP;AACA;AACA,KAAK;AACL,IAAI,8EAAgB;AACpB;;;;;;;;;;;;;;;;;;;;;ACzEiE;AACuB;AACxC;AACkC;AAC3E,2BAA2B,0DAAU;AAC5C;AACA,QAAQ,2FAAsB;AAC9B;AACA;AACA,CAAC;AACD;AACA,QAAQ,6FAAwB;AAChC;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,QAAQ,gGAA2B;AACnC;AACA;AACA,CAAC;AACD;AACA,QAAQ,8FAAyB;AACjC;AACA;AACA,CAAC;AACD;AACA,QAAQ,8FAAyB;AACjC;AACA;AACA,CAAC;AACD;AACA,QAAQ,8FAAyB;AACjC;AACA;AACA,CAAC;AACM,mCAAmC,0DAAU;AAC7C;AACP;AACA;AACA,KAAK;AACL,IAAI,8EAAgB;AACpB;AACA;AACA;AACA;AACA,gBAAgB,0FAAkC;AAClD,KAAK;AACL;AACA;AACA;AACA;AACA,gBAAgB,0FAAkC;AAClD,KAAK;AACL;AACA;AACA;AACA;AACA,gBAAgB,0FAAkC;AAClD,KAAK;AACL;AACA;AACA,KAAK;AACL,IAAI,oFAAsB;AAC1B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpEA;AACoG;AACpG;AAC0E;AAC1E;AACuE;AACvE;AACoE;AACpB;AAChD;AAC8C;AACO;AACU;AACJ;AACkB;AAC7E;AACwE;AACxE;AAC4D;AACe;AACF;AACE;AACtB;AACM;AACc;AACE;AACV;AACjE;AAC4D;AACpB;AACiB;AACN;AACF;AACjD;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,QAAQ,mDAAU;AAClB,UAAU,wDAAI;AACd,cAAc,4EAAc;AAC5B,gBAAgB,6DAAU;AAC1B;AACA,mBAAmB,sFAAkB;AACrC,KAAK;AACL,UAAU,6DAAW;AACrB,cAAc,uDAAQ;AACtB,YAAY,uDAAM;AAClB,cAAc,yDAAQ;AACtB,eAAe,0DAAS;AACxB,gBAAgB,2DAAU;AAC1B,SAAS,oDAAG;AACZ,mBAAmB,8DAAa;AAChC,kBAAkB,wEAAY;AAC9B,iBAAiB,mEAAW;AAC5B,aAAa,kFAAiB;AAC9B,YAAY,+EAAgB;AAC5B;AACA,gBAAgB,kFAAe;AAC/B,gBAAgB,mEAAa;AAC7B,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,QAAQ,6EAA4B;AACpC;AACA,KAAK;AACL;AACA,cAAc,0EAAe;AAC7B,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,eAAe,wFAAoB;AACnC,KAAK;AACL;AACA,mBAAmB,qEAAW;AAC9B,KAAK;AACL;AACA,mBAAmB,8DAAQ;AAC3B,KAAK;AACL;AACA,mBAAmB,oFAAc;AACjC,KAAK;AACL;AACA,mBAAmB,kFAAa;AAChC,KAAK;AACL;AACA,mBAAmB,oFAAc;AACjC,KAAK;AACL;AACA,mBAAmB,kFAAa;AAChC,KAAK;AACL;AACA,eAAe,wEAAY;AAC3B,KAAK;AACL;AACA,mBAAmB,0EAAc;AACjC,KAAK;AACL;AACA,mBAAmB,sEAAkB;AACrC;;;;;;;;;;;;;;;;;;;ACvHuD;AAC0B;AAC/B;AACK;AAChD;AACP,kBAAkB,yEAAiB;AACnC;AACA,QAAQ,mFAA2B;AACnC,yBAAyB,8EAAsB;AAC/C;AACA;AACA;AACA;AACA,IAAI,mFAAmC,aAAa,mGAA+B;AACnF,IAAI,kFAAkC,OAAO,mGAA+B;AAC5E,IAAI,8EAA8B;AAClC,QAAQ,kEAAmB;AAC3B,KAAK;AACL,IAAI,iFAAiC;AACrC;AACA,YAAY,oEAAqB;AACjC;AACA;AACA;AACA,YAAY,oEAAqB;AACjC,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,IAAI,oFAAoC,aAAa,oGAAgC;AACrF,IAAI,mFAAmC,OAAO,oGAAgC;AAC9E,IAAI,+EAA+B,iBAAiB,mEAAoB;AACxE,IAAI,kFAAkC;AACtC;AACA,YAAY,qEAAsB;AAClC;AACA;AACA;AACA,YAAY,qEAAsB;AAClC,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,IAAI,oFAAoC,aAAa,oGAAgC;AACrF,IAAI,mFAAmC,OAAO,oGAAgC;AAC9E,IAAI,+EAA+B;AACnC,QAAQ,mEAAoB;AAC5B,KAAK;AACL,IAAI,kFAAkC;AACtC;AACA,YAAY,qEAAsB;AAClC;AACA;AACA;AACA,YAAY,qEAAsB;AAClC,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,IAAI,yFAAyC;AAC7C;AACA,KAAK;AACL,IAAI,yFAAyC;AAC7C;AACA,KAAK;AACL;AACA;AACA;AACA,IAAI,gGAAgD;AACpD,QAAQ,6EAAqB;AAC7B,QAAQ,sEAAuB;AAC/B,KAAK;AACL;;;;;;;;;;;;;;;;;AC3EwC;AACuB;AACxD;AACP;AACA;AACA;AACA;AACA,UAAU,wDAAgB;AAC1B,IAAI,2EAAiB;AACrB;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;ACjBwC;AACxC;AACkE;AACY;AAC/B;AAC+B;AACA;AACF;AACW;AACnB;AACN;AACC;AAC/D,uBAAuB,mFAAc;AACrC,uBAAuB,mFAAc;AACrC,sBAAsB,iFAAa;AACnC,2BAA2B,yEAAc;AACzC,wBAAwB,qEAAW;AACnC;AACO;AACP,cAAc,gEAAwB;AACtC,sBAAsB,iFAAuB;AAC7C;AACA,YAAY,kEAAmB;AAC/B;AACA;AACA;AACA,YAAY,8FAAsC;AAClD,uCAAuC,sFAA8B;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,YAAY,iFAAuB,WAAW,mGAA+B;AAC7E;AACA,KAAK;AACL;AACA,sBAAsB,gEAAwB;AAC9C,YAAY,qEAAsB;AAClC,YAAY,qFAA2B;AACvC,2BAA2B,kFAAwB;AACnD;AACA,gBAAgB,qFAA2B;AAC3C,gBAAgB,qEAAsB;AACtC;AACA,SAAS;AACT,KAAK;AACL;AACA,oBAAoB,gEAAwB;AAC5C;AACA;AACA,YAAY,kFAAwB;AACpC,YAAY,mEAAoB;AAChC,SAAS;AACT,0BAA0B,gEAAwB;AAClD,YAAY,gGAAwB;AACpC;AACA,YAAY,yEAA0B;AACtC,SAAS;AACT,oBAAoB,gEAAwB;AAC5C;AACA;AACA,YAAY,kFAAwB;AACpC,YAAY,mEAAoB;AAChC,SAAS;AACT,mBAAmB,gEAAwB;AAC3C;AACA;AACA,YAAY,iFAAuB;AACnC,YAAY,kEAAmB;AAC/B,SAAS;AACT,KAAK;AACL;;;;;;;;;;;;;;;;;;;;;;;AC/E+C;AACN;AACW;AAC7C,YAAY,qEAA4B;AAC/C;AACA,iCAAiC;AACjC,CAAC;AACD,oEAAqB;AACd,iBAAiB,8DAAqB,kBAAkB;AAC/D,oEAAqB;AACd,eAAe,8DAAqB;AAC3C,oEAAqB;AACd,kBAAkB,8DAAqB;AAC9C,oEAAqB;AACrB;AACA;AACA,CAAC;AACM,sBAAsB,8DAAqB;AAC3C,mBAAmB,0DAAiB;AAC3C;AACA,IAAI,2EAAmB;AACvB,CAAC;AACD,uDAAuD;AACvD;AACA;AACA;AACA;AACA,IAAI,yEAAiB;AACrB,CAAC;;;;;;;;;;;;;;;;AC5B2C;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAT;AACI;AACF;AACG;;;;;;;;;;;;;;;;;ACH4B;AACrB;AAC/C;AACA;AACA;AACA,QAAQ,iEAAqB,OAAO,6DAAiB;AACrD;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACO;AACP;AACA,eAAe,wDAAW,OAAO,yDAAa;AAC9C;;;;;;;;;;;;;;;;ACtB6D;AACtD;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,2EAAQ;AAC/B;AACA,wBAAwB,mBAAmB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACpEiC;AACI;;;;;;;;;;;;;;;ACD9B;AACP;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,0HAAoB;AAC/D;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;;;;;;;;;;;;;;;;ACjEoC;;;;;;;UCApC;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;;;;WClCA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,IAAI;WACJ;WACA;WACA,IAAI;WACJ;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,CAAC;WACD;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,EAAE;WACF;WACA,sGAAsG;WACtG;WACA;WACA;WACA;WACA;WACA;WACA;WACA,GAAG;WACH;WACA;WACA;WACA;WACA;WACA,GAAG;WACH;WACA,EAAE;WACF;WACA;;;;;WChEA;WACA;WACA;WACA;WACA,+BAA+B,wCAAwC;WACvE;WACA;WACA;WACA;WACA,iBAAiB,qBAAqB;WACtC;WACA;WACA,kBAAkB,qBAAqB;WACvC;WACA;WACA,KAAK;WACL;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;WC3BA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,sDAAsD;WACtD,sCAAsC,iEAAiE;WACvG;WACA;WACA;WACA;WACA;WACA;;;;;WCzBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,EAAE;WACF;;;;;WCRA;WACA;WACA;WACA;WACA;;;;;WCJA;WACA;WACA;WACA;WACA,GAAG;WACH;WACA;WACA,CAAC;;;;;WCPD;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;WCNA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;WCfA;;WAEA;WACA;WACA;WACA;WACA;;WAEA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,aAAa;WACb;WACA;WACA;WACA;;WAEA;WACA;WACA;;WAEA;;WAEA;;;;;WCpCA;WACA;WACA;WACA;;;;;UEHA;UACA","sources":["webpack://dve-testing/./compiled/client/World/Actions/RegisterActions.js","webpack://dve-testing/./compiled/client/World/Gen/Generate.js","webpack://dve-testing/./compiled/client/World/Gen/WorldGen.js","webpack://dve-testing/./compiled/client/World/Player.js","webpack://dve-testing/./compiled/client/World/Session/Session.js","webpack://dve-testing/./compiled/client/World/State/WorldEvent.js","webpack://dve-testing/./compiled/client/World/State/WorldState.js","webpack://dve-testing/./compiled/client/World/world.js","webpack://dve-testing/./compiled/core/data/shared/Functions/RegisterVoxelData.js","webpack://dve-testing/external commonjs \"perf_hooks\"","webpack://dve-testing/../../DSLIBS/crystallineState/dist/StateMachine.js","webpack://dve-testing/../../DSLIBS/crystallineState/dist/StateProxy.js","webpack://dve-testing/../../DSLIBS/crystallineState/dist/index.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/Common/Queues/ConstructorQueues.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/Common/Tasks/ConstructorTasks.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/Common/Threads/Contracts/ConstructorRemoteThreadTasks.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/Common/Threads/Contracts/ConstructorTasks.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/Data/Constants/DataHeaders.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/Data/Items/ItemManager.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/Tools/Brush/AdvancedBrushTool.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/Tools/Brush/Brush.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/Tools/Build/BuilderTool.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/Tools/Data/DataLoaderTool.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/Tools/Tasks/TasksTool.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/World/Data/DataSync.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/World/Data/Generators/VoxelDataGenerator.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/World/Data/Generators/WorldDataGenerator.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/World/Data/Managers/VoxelManager.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/World/Data/TagBuilders/VoxelTagBuilder.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/World/Data/Tags/ChunkTags.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/World/Data/Tags/ColumnTags.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/World/Data/Tags/RegionTags.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/World/DivineVoxelEngineWorld.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/World/Hooks/Data/DataHooks.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/World/Init/InitWorldWorker.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/World/Tasks/WorldTasks.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/World/Threads/Threads.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/World/index.js","webpack://dve-testing/../../DSLIBS/dvePlugIns/Player/dist/Data/index.js","webpack://dve-testing/../../DSLIBS/dvePlugIns/Player/dist/World/InitWorldPlayer.js","webpack://dve-testing/../../DSLIBS/dvePlugIns/Player/dist/World/WorldPlayer.js","webpack://dve-testing/../../DSLIBS/dvePlugIns/Player/dist/World/index.js","webpack://dve-testing/./node_modules/simloop/SimulationLoop.js","webpack://dve-testing/./node_modules/simloop/index.js","webpack://dve-testing/webpack/bootstrap","webpack://dve-testing/webpack/runtime/async module","webpack://dve-testing/webpack/runtime/chunk loaded","webpack://dve-testing/webpack/runtime/create fake namespace object","webpack://dve-testing/webpack/runtime/define property getters","webpack://dve-testing/webpack/runtime/ensure chunk","webpack://dve-testing/webpack/runtime/get javascript chunk filename","webpack://dve-testing/webpack/runtime/global","webpack://dve-testing/webpack/runtime/hasOwnProperty shorthand","webpack://dve-testing/webpack/runtime/make namespace object","webpack://dve-testing/webpack/runtime/publicPath","webpack://dve-testing/webpack/runtime/importScripts chunk loading","webpack://dve-testing/webpack/runtime/startup chunk dependencies","webpack://dve-testing/webpack/before-startup","webpack://dve-testing/webpack/startup","webpack://dve-testing/webpack/after-startup"],"sourcesContent":["import { DVEW } from \"divine-voxel-engine/World\";\r\nimport { DVEWorldPlayer } from \"../Player\";\r\nexport function RegisterActions() {\r\n    const physicsData = DVEWorldPlayer.manager.physics;\r\n    const dataTool = DVEW.getDataTool();\r\n    const brush = DVEW.getBrush();\r\n    DVEW.TC.registerTasks(\"place\", async (data) => {\r\n        const [x, y, z] = physicsData.pick.getPlacePosition();\r\n        if (x == Infinity)\r\n            return;\r\n        if (!dataTool.loadInAt(x, y, z))\r\n            return;\r\n        if (dataTool.isRenderable())\r\n            return;\r\n        await brush.setId(data).setXYZ(x, y, z).paintAndAwaitUpdate();\r\n        DVEW.parentComm.runTasks(\"play-sound\", [\"voxel-place\", data, x, y, z]);\r\n        const raw = brush.getRaw();\r\n    });\r\n    DVEW.TC.registerTasks(\"break\", async () => {\r\n        const [x, y, z] = physicsData.pick.position.getAsArray();\r\n        if (x == Infinity)\r\n            return;\r\n        if (!dataTool.loadInAt(x, y, z))\r\n            return;\r\n        if (dataTool.isRenderable()) {\r\n            const id = dataTool.getStringId();\r\n            DVEW.parentComm.runTasks(\"play-sound\", [\"voxel-break\", id, x, y, z]);\r\n            await brush.setXYZ(x, y, z).eraseAndAwaitUpdate();\r\n        }\r\n    });\r\n}\r\n","import { DVEW } from \"divine-voxel-engine/World\";\r\nimport { WorldGen } from \"./WorldGen\";\r\nexport async function GenerateWorld() {\r\n    console.log(\"generating world\");\r\n    const numChunks = 2;\r\n    let startX = -16 * numChunks;\r\n    let startZ = -16 * numChunks;\r\n    let endX = 16 * numChunks;\r\n    let endZ = 16 * numChunks;\r\n    const builder = DVEW.getBuilder();\r\n    const tasks = DVEW.getTasksTool();\r\n    for (let x = startX; x < endX; x += 16) {\r\n        for (let z = startZ; z < endZ; z += 16) {\r\n            WorldGen.generateWorldColumn(x, z);\r\n            tasks.light.worldSun.add(x, z);\r\n        }\r\n    }\r\n    await tasks.light.worldSun.runAndAwait();\r\n    for (let x = startX; x < endX; x += 16) {\r\n        for (let z = startZ; z < endZ; z += 16) {\r\n            builder.setXZ(x, z).buildColumn();\r\n        }\r\n    }\r\n}\r\n","import { DVEW } from \"divine-voxel-engine/World\";\r\nconst brush = DVEW.getBrush();\r\nexport const WorldGen = {\r\n    chunkDepth: 16,\r\n    chunkWidth: 16,\r\n    worldHeight: 256,\r\n    minY: 60,\r\n    generateHoleChunk(chunkX, chunkZ) {\r\n        let rx = 0;\r\n        for (let x = chunkX; x < this.chunkWidth + chunkX; x++) {\r\n            let rz = 0;\r\n            for (let z = chunkZ; z < this.chunkDepth + chunkZ; z++) {\r\n                for (let y = 0; y < this.worldHeight; y++) {\r\n                    if (rx == 0 || rz == 0 || rx == 15 || rz == 15) {\r\n                        if (y > this.minY)\r\n                            break;\r\n                        if (y == this.minY) {\r\n                            brush.setId(\"dve_dread_stone\").setXYZ(x, y, z).paint();\r\n                            if (Math.random() > 0.8) {\r\n                                brush\r\n                                    .setId(\"dve_dread_grass\")\r\n                                    .setXYZ(x, y + 1, z)\r\n                                    .paint();\r\n                            }\r\n                        }\r\n                    }\r\n                    if (rx == 1 || rz == 1 || rx == 14 || rz == 14) {\r\n                        if (y == this.minY - 1) {\r\n                            brush.setId(\"dve_dread_stone\").setXYZ(x, y, z).paint();\r\n                            if (Math.random() > 0.8) {\r\n                                brush\r\n                                    .setId(\"dve_dread_grass\")\r\n                                    .setXYZ(x, y + 1, z)\r\n                                    .paint();\r\n                            }\r\n                        }\r\n                    }\r\n                    if (rx == 2 || rz == 2 || rx == 13 || rz == 13) {\r\n                        if (y == this.minY - 2) {\r\n                            brush.setId(\"dve_dread_stone\").setXYZ(x, y, z).paint();\r\n                            if (Math.random() > 0.8) {\r\n                                brush\r\n                                    .setId(\"dve_dread_grass\")\r\n                                    .setXYZ(x, y + 1, z)\r\n                                    .paint();\r\n                            }\r\n                        }\r\n                    }\r\n                    if (rx == 3 || rz == 3 || rx == 12 || rz == 12) {\r\n                        if (y == this.minY - 3) {\r\n                            brush.setId(\"dve_dread_stone\").setXYZ(x, y, z).paint();\r\n                            if (Math.random() > 0.8) {\r\n                                brush\r\n                                    .setId(\"dve_dread_grass\")\r\n                                    .setXYZ(x, y + 1, z)\r\n                                    .paint();\r\n                            }\r\n                        }\r\n                    }\r\n                    if (rx == 4 || rz == 4 || rx == 11 || rz == 11) {\r\n                        if (y == this.minY - 4) {\r\n                            brush.setId(\"dve_dread_stone\").setXYZ(x, y, z).paint();\r\n                            if (Math.random() > 0.8) {\r\n                                brush\r\n                                    .setId(\"dve_dread_grass\")\r\n                                    .setXYZ(x, y + 1, z)\r\n                                    .paint();\r\n                            }\r\n                        }\r\n                    }\r\n                    if (rx == 5 || rz == 5 || rx == 10 || rz == 10) {\r\n                        if (y == this.minY - 5) {\r\n                            brush.setId(\"dve_dread_stone\").setXYZ(x, y, z).paint();\r\n                            if (Math.random() > 0.8) {\r\n                                brush\r\n                                    .setId(\"dve_dread_grass\")\r\n                                    .setXYZ(x, y + 1, z)\r\n                                    .paint();\r\n                            }\r\n                        }\r\n                    }\r\n                    if (rx == 6 || rz == 6 || rx == 9 || rz == 9) {\r\n                        if (y == this.minY - 6) {\r\n                            brush.setId(\"dve_dread_stone\").setXYZ(x, y, z).paint();\r\n                            if (Math.random() > 0.8) {\r\n                                brush\r\n                                    .setId(\"dve_dread_grass\")\r\n                                    .setXYZ(x, y + 1, z)\r\n                                    .paint();\r\n                            }\r\n                        }\r\n                    }\r\n                    if (y < this.minY - 7) {\r\n                        brush.setId(\"dve_dread_stone\").setXYZ(x, y, z).paint();\r\n                        if (Math.random() > 0.8) {\r\n                            brush\r\n                                .setId(\"dve_dread_grass\")\r\n                                .setXYZ(x, y + 1, z)\r\n                                .paint();\r\n                        }\r\n                    }\r\n                }\r\n                rz++;\r\n            }\r\n            rx++;\r\n        }\r\n    },\r\n    generateNormalChunk(chunkX, chunkZ) {\r\n        for (let x = chunkX; x < this.chunkWidth + chunkX; x++) {\r\n            for (let z = chunkZ; z < this.chunkDepth + chunkZ; z++) {\r\n                for (let y = 0; y < this.worldHeight; y++) {\r\n                    if (y > this.minY + 1)\r\n                        break;\r\n                    if (y <= this.minY) {\r\n                        brush.setId(\"dve_dread_stone\").setXYZ(x, y, z).paint();\r\n                    }\r\n                    if (y == this.minY + 1) {\r\n                        if (Math.random() > 0.8) {\r\n                            brush.setId(\"dve_dread_grass\").setXYZ(x, y, z).paint();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n    //1376271\r\n    generateRoofChunk(chunkX, chunkZ) {\r\n        for (let x = chunkX; x < this.chunkWidth + chunkX; x++) {\r\n            for (let z = chunkZ; z < this.chunkDepth + chunkZ; z++) {\r\n                for (let y = 0; y < this.minY + 10; y++) {\r\n                    brush.setXYZ(x, y, z);\r\n                    if (y < this.minY - 3) {\r\n                        brush.setId(\"dve_dread_stone\").paint();\r\n                    }\r\n                    if (y == this.minY - 3 && Math.random() > 0.8) {\r\n                        brush.setId(\"dve_dread_grass\").paint();\r\n                    }\r\n                    if (y == this.minY) {\r\n                        brush.setId(\"dve_dread_stone_pillar\").paint();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n    generateBoxChunk(chunkX, chunkZ) {\r\n        for (let x = chunkX; x < this.chunkWidth + chunkX; x++) {\r\n            for (let z = chunkZ; z < this.chunkDepth + chunkZ; z++) {\r\n                for (let y = 0; y < this.minY + 10; y++) {\r\n                    brush.setXYZ(x, y, z);\r\n                    if (y < this.minY - 3) {\r\n                        brush.setId(\"dve_dread_stone\").paint();\r\n                    }\r\n                    if (y == this.minY - 3 && Math.random() > 0.8) {\r\n                        brush.setId(\"dve_dread_grass\").paint();\r\n                    }\r\n                    if (y == this.minY) {\r\n                        brush.setId(\"dve_dread_stone_pillar\").paint();\r\n                    }\r\n                    if (y == this.minY + 5) {\r\n                        brush.setId(\"dve_dread_stone_pillar\").paint();\r\n                    }\r\n                    if (y >= this.minY &&\r\n                        y <= this.minY + 5 &&\r\n                        (x == chunkX || x == chunkX + 15 || z == chunkZ || z == chunkZ + 15)) {\r\n                        brush.setId(\"dve_dread_stone_pillar\").paint();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n    generateWorldColumn(chunkX, chunkZ) {\r\n        brush.start();\r\n        let toss = Math.random();\r\n        if ((chunkX == 0 && chunkZ == 0) ||\r\n            (chunkX == 0 && chunkZ == -16) ||\r\n            (chunkX == -16 && chunkZ == -0) ||\r\n            (chunkX == -16 && chunkZ == -16)) {\r\n            this.generateRoofChunk(chunkX, chunkZ);\r\n            return;\r\n        }\r\n        if (toss < 0.3) {\r\n            this.generateBoxChunk(chunkX, chunkZ);\r\n            return;\r\n        }\r\n        if (toss > 0.6) {\r\n            this.generateHoleChunk(chunkX, chunkZ);\r\n            return;\r\n        }\r\n        this.generateNormalChunk(chunkX, chunkZ);\r\n        brush.stop();\r\n    },\r\n};\r\n","export const DVEWorldPlayer = {\r\n    player: {},\r\n    dimension: \"main\",\r\n    manager: {},\r\n    $INIT(player) {\r\n        this.manager = player.manager;\r\n        this.player = player;\r\n    },\r\n};\r\n","import { SimulationLoop } from \"simloop\";\r\nimport { DVEW } from \"divine-voxel-engine/World\";\r\nimport { GenerateWorld } from \"../Gen/Generate.js\";\r\nexport const GameSession = {\r\n    player: {},\r\n    async preLoad() {\r\n        await GenerateWorld();\r\n    },\r\n    startSession() {\r\n        DVEW.nexusComm.runTasks(\"start-world\", []);\r\n        DVEW.nexusComm.runTasks(\"set-player-position\", [0, 70, 0]);\r\n        SimulationLoop.registerInterval(0);\r\n        SimulationLoop.addToInterval(0, () => {\r\n            this.player.update();\r\n        });\r\n        SimulationLoop.run();\r\n    },\r\n    endSession() { },\r\n};\r\n","import { WORLD_SM } from \"./WorldState\";\r\nimport { DVEW } from \"divine-voxel-engine/World\";\r\nimport { RegisterVoxelData } from \"../../../core/data/shared/Functions/RegisterVoxelData.js\";\r\n//import { $INITWorldPlayer } from \"./Player/WorldPlayer.js\";\r\nimport { INIT_WORLD_PLAYER } from \"dve-plugins-player/World\";\r\nimport { SimulationLoop } from \"simloop\";\r\nimport { GameSession } from \"../Session/Session.js\";\r\nimport { DVEWorldPlayer } from \"../Player.js\";\r\nimport { RegisterActions } from \"../Actions/RegisterActions\";\r\nexport function RegisterWorldEvents() {\r\n    WORLD_SM.addToStates({\r\n        INIT: {\r\n            LOAD: async () => {\r\n                DVEW.TC.registerTasks(\"start-world\", (data, onDone) => {\r\n                    if (!onDone)\r\n                        return;\r\n                    WORLD_SM.triggerEvent(\"IDLE\", \"LOAD_SAVE\", {\r\n                        save: data,\r\n                        onDone: () => {\r\n                            onDone();\r\n                        },\r\n                    });\r\n                }, \"deffered\");\r\n                DVEW.TC.registerTasks(\"end-world\", () => {\r\n                    GameSession.endSession();\r\n                });\r\n                RegisterVoxelData(DVEW);\r\n                await DVEW.$INIT();\r\n                await SimulationLoop.$INIT(20);\r\n                const worldPlayer = await INIT_WORLD_PLAYER(DVEW);\r\n                DVEWorldPlayer.$INIT(worldPlayer);\r\n                GameSession.player = worldPlayer;\r\n                RegisterActions();\r\n                WORLD_SM.triggerEvent(\"INIT\", \"DONE\");\r\n            },\r\n        },\r\n    })\r\n        .addToStates({\r\n        IDLE: {\r\n            LOAD_SAVE: async (args) => {\r\n                WORLD_SM.triggerEvent(\"IN_WORLD\", \"LOADING\", args);\r\n            },\r\n        },\r\n    })\r\n        .addToStates({\r\n        IN_WORLD: {\r\n            LOADING: async (args) => {\r\n                await GameSession.preLoad();\r\n                args.onDone();\r\n                WORLD_SM.triggerEvent(\"IN_WORLD\", \"START\");\r\n            },\r\n        },\r\n    })\r\n        .addToStates({\r\n        IN_WORLD: {\r\n            START: (args) => {\r\n                GameSession.startSession();\r\n            },\r\n        },\r\n    });\r\n}\r\nself.session = GameSession;\r\n","import { CreateMachine } from \"../../../../../../DSLIBS/crystallineState/dist\";\r\nimport { RegisterWorldEvents } from \"./WorldEvent\";\r\nexport const WORLD_SM = CreateMachine({\r\n    INIT: {\r\n        LOAD: {\r\n            goTo: \"INIT\",\r\n        },\r\n        DONE: {\r\n            goTo: \"IDLE\",\r\n        },\r\n    },\r\n    IDLE: {\r\n        LOAD_SAVE: {\r\n            args: { save: \"\", onDone: () => { } },\r\n            goTo: \"IN_WORLD\",\r\n        },\r\n    },\r\n    IN_WORLD: {\r\n        PAUSE: {\r\n            goTo: \"IN_WORLD\",\r\n        },\r\n        EXIT: {\r\n            goTo: \"IDLE\",\r\n        },\r\n        LOADING: {\r\n            args: { save: \"\", onDone: () => { } },\r\n            goTo: \"IN_WORLD\",\r\n        },\r\n        START: {\r\n            goTo: \"INIT\",\r\n        },\r\n    },\r\n});\r\nWORLD_SM.activeState = \"INIT\";\r\nRegisterWorldEvents();\r\n","import { WORLD_SM } from \"./State/WorldState.js\";\r\nawait WORLD_SM.triggerEvent(\"INIT\", \"LOAD\");\r\n","export function RegisterVoxelData(DVEW) {\r\n    DVEW.voxelManager.registerVoxelData([\r\n        //util\r\n        {\r\n            id: \"dve_debug_box\",\r\n            tags: [\r\n                [\"#dve_substance\", \"#dve_solid\"],\r\n                [\"#dve_shape_id\", \"#dve_box\"],\r\n                [\"#dve_is_light_source\", true],\r\n                [\"#dve_light_value\", [15, 15, 15]],\r\n                [\"#dve_collider_id\", \"#dve_box\"],\r\n                [\"#dve_check_collisions\", true],\r\n                [\"#dve_material\", \"stone\"],\r\n            ],\r\n        },\r\n        {\r\n            id: \"dve_light_debug\",\r\n            tags: [\r\n                [\"#dve_substance\", \"#dve_solid\"],\r\n                [\"#dve_shape_id\", \"#dve_box\"],\r\n                [\"#dve_collider_id\", \"#dve_box\"],\r\n                [\"#dve_check_collisions\", true],\r\n                [\"#dve_material\", \"stone\"],\r\n            ],\r\n        },\r\n        {\r\n            id: \"dve_data_holder\",\r\n            tags: [\r\n                [\"#dve_substance\", \"#dve_solid\"],\r\n                [\"#dve_shape_id\", \"#dve_box\"],\r\n                [\"#dve_collider_id\", \"#dve_box\"],\r\n                [\"#dve_check_collisions\", true],\r\n                [\"#dve_is_rich\", true],\r\n                [\"#dve_material\", \"stone\"],\r\n            ],\r\n        },\r\n        {\r\n            id: \"dve_marker_box\",\r\n            states: 15,\r\n            tags: [\r\n                [\"#dve_substance\", \"#dve_solid\"],\r\n                [\"#dve_shape_id\", \"#dve_box\"],\r\n                [\"#dve_collider_id\", \"#dve_box\"],\r\n                [\"#dve_check_collisions\", true],\r\n                [\"#dve_material\", \"stone\"],\r\n            ],\r\n        },\r\n        //dream\r\n        {\r\n            id: \"dve_dream_stone\",\r\n            states: 1,\r\n            tags: [\r\n                [\"#dve_substance\", \"#dve_solid\"],\r\n                [\"#dve_shape_id\", \"#dve_box\"],\r\n                [\"#dve_collider_id\", \"#dve_box\"],\r\n                [\"#dve_check_collisions\", true],\r\n                [\"#dve_material\", \"grassy-stone\"],\r\n            ],\r\n        },\r\n        {\r\n            id: \"dve_dream_stone_pillar\",\r\n            tags: [\r\n                [\"#dve_substance\", \"#dve_solid\"],\r\n                [\"#dve_shape_id\", \"#dve_box\"],\r\n                [\"#dve_collider_id\", \"#dve_box\"],\r\n                [\"#dve_check_collisions\", true],\r\n                [\"#dve_material\", \"stone\"],\r\n            ],\r\n        },\r\n        {\r\n            id: \"dve_dream_grass_block\",\r\n            tags: [\r\n                [\"#dve_substance\", \"#dve_flora\"],\r\n                [\"#dve_shape_id\", \"#dve_box\"],\r\n                [\"#dve_collider_id\", \"#dve_box\"],\r\n                [\"#dve_check_collisions\", true],\r\n                [\"#dve_material\", \"stone\"],\r\n            ],\r\n        },\r\n        {\r\n            id: \"dve_dream_lamp\",\r\n            tags: [\r\n                [\"#dve_substance\", \"#dve_solid\"],\r\n                [\"#dve_shape_id\", \"#dve_box\"],\r\n                [\"#dve_is_light_source\", true],\r\n                [\"#dve_light_value\", [15, 0, 15]],\r\n                [\"#dve_collider_id\", \"#dve_box\"],\r\n                [\"#dve_check_collisions\", true],\r\n                [\"#dve_material\", \"stone\"],\r\n            ],\r\n        },\r\n        {\r\n            id: \"dve_dream_stone_slab\",\r\n            tags: [\r\n                [\"#dve_substance\", \"#dve_solid\"],\r\n                [\"#dve_shape_id\", \"#dve_halfbox\"],\r\n                [\"#dve_collider_id\", \"#dve_box\"],\r\n                [\"#dve_check_collisions\", true],\r\n                [\"#dve_material\", \"grassy-stone\"],\r\n            ],\r\n        },\r\n        {\r\n            id: \"dve_dream_log\",\r\n            tags: [\r\n                [\"#dve_substance\", \"#dve_solid\"],\r\n                [\"#dve_shape_id\", \"#dve_box\"],\r\n                [\"#dve_collider_id\", \"#dve_box\"],\r\n                [\"#dve_check_collisions\", true],\r\n                [\"#dve_material\", \"wood\"],\r\n            ],\r\n        },\r\n        {\r\n            id: \"dve_dream_stone_stair\",\r\n            tags: [\r\n                [\"#dve_substance\", \"#dve_transparent\"],\r\n                [\"#dve_shape_id\", \"#dve_stair\"],\r\n                [\"#dve_collider_id\", \"#dve_stair\"],\r\n                [\"#dve_check_collisions\", true],\r\n                [\"#dve_material\", \"stone\"],\r\n            ],\r\n        },\r\n        {\r\n            id: \"dve_dream_grass\",\r\n            tags: [\r\n                [\"#dve_substance\", \"#dve_flora\"],\r\n                [\"#dve_shape_id\", \"#dve_crossed_panels\"],\r\n                [\"#dve_check_collisions\", false],\r\n                [\"#dve_material\", \"grass\"],\r\n            ],\r\n        },\r\n        {\r\n            id: \"dve_dream_vine\",\r\n            tags: [\r\n                [\"#dve_substance\", \"#dve_flora\"],\r\n                [\"#dve_shape_id\", \"#dve_panel\"],\r\n                [\"#dve_check_collisions\", false],\r\n                [\"#dve_material\", \"grass\"],\r\n            ],\r\n        },\r\n        {\r\n            id: \"dve_dream_leaves\",\r\n            tags: [\r\n                [\"#dve_substance\", \"#dve_flora\"],\r\n                [\"#dve_shape_id\", \"#dve_box\"],\r\n                [\"#dve_collider_id\", \"#dve_box\"],\r\n                [\"#dve_check_collisions\", true],\r\n                [\"#dve_material\", \"grass\"],\r\n            ],\r\n        },\r\n        {\r\n            id: \"dve_liquid_dream_ether\",\r\n            tags: [\r\n                [\"#dve_substance\", \"#dve_liquid\"],\r\n                [\"#dve_shape_id\", \"#dve_liquid\"],\r\n                [\"#dve_collider_id\", \"#dve_box\"],\r\n                [\"#dve_check_collisions\", true],\r\n                [\"#dve_material\", \"water\"],\r\n            ],\r\n        },\r\n        //dread\r\n        {\r\n            id: \"dve_dread_stone\",\r\n            states: 1,\r\n            tags: [\r\n                [\"#dve_substance\", \"#dve_solid\"],\r\n                [\"#dve_shape_id\", \"#dve_box\"],\r\n                [\"#dve_collider_id\", \"#dve_box\"],\r\n                [\"#dve_check_collisions\", true],\r\n                [\"#dve_material\", \"grassy-stone\"],\r\n            ],\r\n        },\r\n        {\r\n            id: \"dve_dread_grass_block\",\r\n            tags: [\r\n                [\"#dve_substance\", \"#dve_flora\"],\r\n                [\"#dve_shape_id\", \"#dve_box\"],\r\n                [\"#dve_collider_id\", \"#dve_box\"],\r\n                [\"#dve_check_collisions\", true],\r\n                [\"#dve_material\", \"stone\"],\r\n            ],\r\n        },\r\n        {\r\n            id: \"dve_dread_grass\",\r\n            tags: [\r\n                [\"#dve_substance\", \"#dve_flora\"],\r\n                [\"#dve_shape_id\", \"#dve_crossed_panels\"],\r\n                [\"#dve_check_collisions\", false],\r\n                [\"#dve_material\", \"grass\"],\r\n            ],\r\n        },\r\n        {\r\n            id: \"dve_dread_lamp\",\r\n            tags: [\r\n                [\"#dve_substance\", \"#dve_solid\"],\r\n                [\"#dve_shape_id\", \"#dve_box\"],\r\n                [\"#dve_is_light_source\", true],\r\n                [\"#dve_light_value\", [15, 0, 0]],\r\n                [\"#dve_collider_id\", \"#dve_box\"],\r\n                [\"#dve_check_collisions\", true],\r\n                [\"#dve_material\", \"stone\"],\r\n            ],\r\n        },\r\n        {\r\n            id: \"dve_dread_stone_pillar\",\r\n            tags: [\r\n                [\"#dve_substance\", \"#dve_solid\"],\r\n                [\"#dve_shape_id\", \"#dve_box\"],\r\n                [\"#dve_collider_id\", \"#dve_box\"],\r\n                [\"#dve_check_collisions\", true],\r\n                [\"#dve_material\", \"stone\"],\r\n            ],\r\n        },\r\n        {\r\n            id: \"dve_liquid_dread_ether\",\r\n            tags: [\r\n                [\"#dve_substance\", \"#dve_liquid\"],\r\n                [\"#dve_shape_id\", \"#dve_liquid\"],\r\n                [\"#dve_collider_id\", \"#dve_box\"],\r\n                [\"#dve_check_collisions\", true],\r\n                [\"#dve_material\", \"water\"],\r\n            ],\r\n        },\r\n    ]);\r\n}\r\n","module.exports = require(\"perf_hooks\");","export class StateMachine {\r\n    states;\r\n    history = [];\r\n    activeState;\r\n    stateMachineData = {\r\n        historyLength: 0,\r\n        name: \"sup\",\r\n    };\r\n    stateData = {};\r\n    constructor(states) {\r\n        this.states = states;\r\n        for (const state in states) {\r\n            this.stateData[state] = {};\r\n            const events = states[state];\r\n            for (const eventKey in events) {\r\n                this.stateData[state][eventKey] = {\r\n                    nextState: events[eventKey].goTo,\r\n                    procedures: [],\r\n                };\r\n            }\r\n        }\r\n    }\r\n    isActiveState(state) {\r\n        return this.activeState == state;\r\n    }\r\n    async triggerEvent(state, event, args) {\r\n        if (!this.states[state]) {\r\n            throw new Error(`The state ${String(state)} does not exist: machine- ${this.stateMachineData.name}.`);\r\n        }\r\n        if (!this.stateData[state][event]) {\r\n            throw new Error(`The event ${String(event)} does not exist on the state ${String(state)}.: machine-> ${this.stateMachineData.name} data.`);\r\n        }\r\n        const procedures = this.stateData[state][event].procedures;\r\n        for await (const procedure of procedures) {\r\n            await procedure.func(args);\r\n        }\r\n        if (this.stateMachineData.historyLength > 0) {\r\n            if (this.history.length > this.stateMachineData.historyLength) {\r\n                this.history.shift();\r\n            }\r\n            this.history.push({\r\n                previousState: this.activeState,\r\n                newState: state,\r\n                event: event,\r\n            });\r\n        }\r\n        this.activeState = state;\r\n        return this;\r\n    }\r\n    addToEvent(state, event, func, bind) {\r\n        if (!this.stateData[state]) {\r\n            throw new Error(`The state ${String(state)} does not exist: machine- ${this.stateMachineData.name}.`);\r\n        }\r\n        if (!this.stateData[state][event]) {\r\n            throw new Error(`The event ${String(event)} does not exist on the state ${String(state)}.: machine-> ${this.stateMachineData.name} data.`);\r\n        }\r\n        this.stateData[state][event].procedures.push({\r\n            bind: bind,\r\n            func: func,\r\n        });\r\n        return this;\r\n    }\r\n    addToStates(data) {\r\n        for (const state in data) {\r\n            for (const event in data[state]) {\r\n                this.addToEvent(state, event, data[state][event]);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n}\r\n","export const StateProxy = {\r\n    createProxy(obj) {\r\n        const events = {};\r\n        const handler1 = {\r\n            get(target, prop, receiver) {\r\n                if (events[prop]) {\r\n                    events[prop][\"get\"].forEach((_) => _());\r\n                }\r\n                return Reflect.get(target, prop, receiver);\r\n            },\r\n            set(target, prop, newValue, receiver) {\r\n                const oldValue = target[prop];\r\n                target[prop] = newValue;\r\n                if (events[prop]) {\r\n                    events[prop][\"set\"].forEach((_) => _(newValue));\r\n                    if (oldValue != newValue) {\r\n                        events[prop][\"change\"].forEach((_) => _(oldValue, newValue));\r\n                    }\r\n                }\r\n                return true;\r\n            },\r\n        };\r\n        const update = (property, event, run) => {\r\n            events[property] ??= {\r\n                change: [],\r\n                get: [],\r\n                set: [],\r\n            };\r\n            events[property][event].push(run);\r\n        };\r\n        return [update, new Proxy(obj, handler1)];\r\n    },\r\n};\r\n","import { StateProxy } from \"./StateProxy.js\";\r\nimport { StateMachine } from \"./StateMachine.js\";\r\nexport function CreateState(data) {\r\n    return StateProxy.createProxy(data);\r\n}\r\nexport function CreateMachine(stateMachineData) {\r\n    return new StateMachine(stateMachineData);\r\n}\r\n","//objects\r\nimport { CCM } from \"../../World/Threads/Threads.js\";\r\nimport { ConstructorTasks } from \"../Threads/Contracts/ConstructorTasks.js\";\r\nconst QMBase = {\r\n    $INIT() {\r\n        this.addQueue(\"main\");\r\n    },\r\n    _queueMap: new Map(),\r\n    addQueue(queueKey) {\r\n        if (this._queueMap.has(queueKey)) {\r\n            this._queueMap.set(queueKey, Date.now());\r\n            return false;\r\n        }\r\n        this.rgb.update.addQueue(queueKey);\r\n        this.rgb.remove.addQueue(queueKey);\r\n        this.sun.update.addQueue(queueKey);\r\n        this.sun.remove.addQueue(queueKey);\r\n        this.worldSun.addQueue(queueKey);\r\n        this.flow.update.addQueue(queueKey);\r\n        this.flow.remove.addQueue(queueKey);\r\n        this.build.chunk.addQueue(queueKey);\r\n        this.generate.addQueue(queueKey);\r\n        this.explosion.run.addQueue(queueKey);\r\n        this.voxelUpdate.erase.addQueue(queueKey);\r\n        this.voxelUpdate.paint.addQueue(queueKey);\r\n        this._queueMap.set(queueKey, Date.now());\r\n        return true;\r\n    },\r\n    removeQueue(queueKey) {\r\n        if (!this._queueMap.has(queueKey))\r\n            return false;\r\n        this.rgb.update.removeQueue(queueKey);\r\n        this.rgb.remove.removeQueue(queueKey);\r\n        this.sun.update.removeQueue(queueKey);\r\n        this.sun.remove.removeQueue(queueKey);\r\n        this.worldSun.removeQueue(queueKey);\r\n        this.flow.update.removeQueue(queueKey);\r\n        this.flow.remove.removeQueue(queueKey);\r\n        this.build.chunk.addQueue(queueKey);\r\n        this.generate.removeQueue(queueKey);\r\n        this.explosion.run.removeQueue(queueKey);\r\n        this.voxelUpdate.erase.removeQueue(queueKey);\r\n        this.voxelUpdate.paint.removeQueue(queueKey);\r\n        this._queueMap.delete(queueKey);\r\n        return true;\r\n    },\r\n    /**# Filter Queues\r\n     * ---\r\n     * Go through each current queue. IF the passed fucntion returns false it will remove that queue.\r\n     * @param filter\r\n     */\r\n    filterQueues(filter) {\r\n        this._queueMap.forEach((v, key) => {\r\n            if (!filter(key)) {\r\n                this.removeQueue(key);\r\n            }\r\n        });\r\n    },\r\n    /**# Filter Old Queues\r\n     * ---\r\n     * Will remove queues older then 10 minutes.\r\n     * @param maxTime Max time in miliseconds.\r\n     */\r\n    filterOldQueues(maxTime = 600000) {\r\n        const t = Date.now();\r\n        this._queueMap.forEach((v, key) => {\r\n            if (t - v > maxTime) {\r\n                this.removeQueue(key);\r\n            }\r\n        });\r\n    },\r\n    rgb: {\r\n        update: CCM.addQueue(\"rgb-update\", ConstructorTasks.RGBlightUpdate, null),\r\n        remove: CCM.addQueue(\"rgb-remove\", ConstructorTasks.RGBlightRemove),\r\n    },\r\n    worldSun: CCM.addQueue(\"world-sun\", ConstructorTasks.worldSun),\r\n    voxelUpdate: {\r\n        erase: CCM.addQueue(\"voxel-update-erase\", ConstructorTasks.voxelErease),\r\n        paint: CCM.addQueue(\"voxel-update-paint\", ConstructorTasks.voxelPaint),\r\n    },\r\n    sun: {\r\n        update: CCM.addQueue(\"sun-update\", ConstructorTasks.sunLightUpdate),\r\n        remove: CCM.addQueue(\"sun-remove\", ConstructorTasks.sunLightRemove),\r\n    },\r\n    explosion: {\r\n        run: CCM.addQueue(\"explosion\", ConstructorTasks.explosion),\r\n    },\r\n    flow: {\r\n        update: CCM.addQueue(\"flow-update\", ConstructorTasks.flowUpdate),\r\n        remove: CCM.addQueue(\"flow-remove\", ConstructorTasks.flowRemove),\r\n    },\r\n    build: {\r\n        chunk: CCM.addQueue(\"build-chunk\", ConstructorTasks.buildChunk),\r\n    },\r\n    generate: CCM.addQueue(\"generatek\", ConstructorTasks.generate),\r\n};\r\nexport const ConstructorQueues = QMBase;\r\n","import { ConstructorQueues } from \"../Queues/ConstructorQueues.js\";\r\nimport { ConstructorRemoteThreadTasks } from \"../Threads/Contracts/ConstructorRemoteThreadTasks.js\";\r\nimport { ThreadComm } from \"threadcomm\";\r\nimport { GetTasksTool } from \"../../Tools/Tasks/TasksTool.js\";\r\nconst tasks = GetTasksTool();\r\nexport const ConstructorTasks = {\r\n    runQueue: {\r\n        build: {\r\n            chunk: ThreadComm.registerTasks(ConstructorRemoteThreadTasks.runRebuildQue, (data) => {\r\n                ConstructorQueues.build.chunk.run(data[0]);\r\n            }),\r\n        },\r\n    },\r\n    addToQueue: {\r\n        rgb: {\r\n            update: ThreadComm.registerTasks(ConstructorRemoteThreadTasks.addToRGBLightUpdateQue, (data) => {\r\n                ConstructorQueues.rgb.update.add(data);\r\n            }),\r\n            remove: null,\r\n        },\r\n        build: {\r\n            addToRebuildQueue: ThreadComm.registerTasks(ConstructorRemoteThreadTasks.addToRebuildQue, (data) => {\r\n                ConstructorQueues.build.chunk.add({\r\n                    data: [data[0], 1],\r\n                    priority: data[2],\r\n                }, data[1]);\r\n            }),\r\n        },\r\n        buildChunk: ThreadComm.registerTasks(ConstructorRemoteThreadTasks.buildChunk, (data) => {\r\n            tasks.setPriority(data.priority);\r\n            tasks.build.chunk.deferred.run(data.data, () => { });\r\n        }),\r\n    },\r\n};\r\n","export const ConstructorRemoteThreadTasks = {\r\n    syncShapeMap: -1,\r\n    addToRebuildQue: 0,\r\n    runRebuildQue: 1,\r\n    addToRGBLightUpdateQue: 2,\r\n    buildChunk: 3\r\n};\r\n","export const ConstructorTasks = {\r\n    buildChunk: 0,\r\n    buildColumn: 0,\r\n    generate: 0,\r\n    RGBlightUpdate: 0,\r\n    RGBlightRemove: 0,\r\n    worldSun: 0,\r\n    sunLightUpdate: 0,\r\n    sunLightRemove: 0,\r\n    analyzerPropagation: 0,\r\n    analyzerUpdate: 0,\r\n    flowUpdate: 0,\r\n    flowRemove: 0,\r\n    constructEntity: 0,\r\n    constructItem: 0,\r\n    explosion: 0,\r\n    voxelErease: 0,\r\n    voxelPaint: 0,\r\n};\r\nlet index = 0;\r\nfor (const key of Object.keys(ConstructorTasks)) {\r\n    ConstructorTasks[key] = index;\r\n    index++;\r\n}\r\n","export const DVEMessageHeader = 0xffff;\r\nexport const WorldDataHeaders = {\r\n    region: 0,\r\n    column: 1,\r\n    chunk: 2,\r\n};\r\n","export const ItemManager = {\r\n    itemData: {},\r\n    _onRegister: (data) => { },\r\n    getItemData(id) {\r\n        const itemData = this.itemData[id];\r\n        if (!itemData) {\r\n            throw new Error(`Item with ${id} does not exists.`);\r\n        }\r\n        return itemData;\r\n    },\r\n    registerItemData(data) {\r\n        this.itemData[data.id] = data;\r\n        this._onRegister(data);\r\n    },\r\n    onRegister(func) {\r\n        this._onRegister = func;\r\n    },\r\n};\r\n","//util\r\nimport { Util } from \"../../Global/Util.helper.js\";\r\n//tools\r\nimport { BrushTool } from \"./Brush.js\";\r\nimport { GetTasksTool } from \"../Tasks/TasksTool.js\";\r\nconst tasks = GetTasksTool();\r\nexport const GetAdvancedBrushTool = () => {\r\n    let brush = Util.merge(new BrushTool(), {\r\n        paintAndAwaitUpdate() {\r\n            const self = this;\r\n            return new Promise((resolve) => {\r\n                self.paintAndUpdate(() => {\r\n                    resolve(true);\r\n                });\r\n            });\r\n        },\r\n        eraseAndAwaitUpdate() {\r\n            const self = this;\r\n            return new Promise((resolve) => {\r\n                self.eraseAndUpdate(() => {\r\n                    resolve(true);\r\n                });\r\n            });\r\n        },\r\n        paintAndUpdate(onDone) {\r\n            tasks.setFocalPoint(brush.location);\r\n            const [dimesnion, x, y, z] = brush.location;\r\n            tasks.voxelUpdate.paint.deferred.run(x, y, z, brush.getRaw(), () => {\r\n                if (onDone)\r\n                    onDone();\r\n            });\r\n        },\r\n        eraseAndUpdate(onDone) {\r\n            tasks.setFocalPoint(brush.location);\r\n            const [dimesnion, x, y, z] = brush.location;\r\n            tasks.voxelUpdate.erase.deferred.run(x, y, z, () => {\r\n                if (onDone)\r\n                    onDone();\r\n            });\r\n        },\r\n        explode(radius = 6, onDone) {\r\n            tasks.setFocalPoint(brush.location);\r\n            const [dimesnion, x, y, z] = brush.location;\r\n            tasks.explosion.run.add(x, y, z, radius);\r\n            tasks.explosion.run.run(() => {\r\n                tasks.build.chunk.async.run(() => (onDone ? onDone() : 0));\r\n            });\r\n        },\r\n    });\r\n    return brush;\r\n};\r\n","import { DataTool } from \"../../Tools/Data/DataTool.js\";\r\nimport { WorldPainter } from \"../../Data/World/WorldPainter.js\";\r\nimport { WorldRegister } from \"../../Data/World/WorldRegister.js\";\r\nimport { VoxelPaletteReader } from \"../../Data/Voxel/VoxelPalette.js\";\r\nimport { LocationBoundTool } from \"../Classes/LocationBoundTool.js\";\r\nexport class BrushTool extends LocationBoundTool {\r\n    data = {\r\n        id: \"dve_air\",\r\n        state: 0,\r\n        shapeState: 0,\r\n        secondaryState: 0,\r\n        secondaryVoxelId: \"dve_air\",\r\n        level: 0,\r\n        levelState: 0,\r\n    };\r\n    _update = true;\r\n    _dt = new DataTool();\r\n    setId(id, state = 0, shapeState = 0) {\r\n        this.data.id = id;\r\n        this.data.state = state;\r\n        this.data.shapeState = shapeState;\r\n        return this;\r\n    }\r\n    setDimension(dimensionId) {\r\n        this.location[0] = dimensionId;\r\n        this._dt.setDimension(dimensionId);\r\n        return this;\r\n    }\r\n    setSecondaryId(id, state = 0) {\r\n        this.data.secondaryVoxelId = id;\r\n        this.data.secondaryState = state;\r\n        return this;\r\n    }\r\n    setState(state) {\r\n        this.data.state = state;\r\n        return this;\r\n    }\r\n    setShapeState(state) {\r\n        this.data.shapeState = state;\r\n        return this;\r\n    }\r\n    clear() {\r\n        this.data.id = \"dve_air\";\r\n        this.data.secondaryVoxelId = \"dve_air\";\r\n        this.data.level = 0;\r\n        this.data.levelState = 0;\r\n        this.data.state = 0;\r\n        this.data.secondaryState = 0;\r\n        this.location[1] = 0;\r\n        this.location[2] = 0;\r\n        this.location[3] = 0;\r\n    }\r\n    setRaw(data) {\r\n        this._dt.loadInRaw(data);\r\n        this.data.id = this._dt.getStringId();\r\n        this.data.shapeState = this._dt.getShapeState();\r\n        this.data.state = this._dt.getState();\r\n        this._dt.setSecondary(true);\r\n        if (this._dt.data.secondaryId >= 2) {\r\n            this.data.secondaryVoxelId = this._dt.getStringId();\r\n            this.data.secondaryState = this._dt.getState();\r\n        }\r\n        this._dt.setSecondary(false);\r\n        return this;\r\n    }\r\n    getRaw() {\r\n        this._dt.setId(VoxelPaletteReader.id.getPaletteId(this.data.id, this.data.state));\r\n        this._dt\r\n            .setSecondary(true)\r\n            .setId(VoxelPaletteReader.id.getPaletteId(this.data.secondaryVoxelId, this.data.secondaryState))\r\n            .setSecondary(false);\r\n        this._dt.setLevel(this.data.state);\r\n        this._dt.setLevelState(this.data.levelState);\r\n        this._dt.setShapeState(this.data.shapeState);\r\n        return this._dt.data.raw;\r\n    }\r\n    getData() {\r\n        return this.data;\r\n    }\r\n    paint() {\r\n        WorldPainter.paint.voxel(this.location, this.data, this._update);\r\n        return this;\r\n    }\r\n    erase() {\r\n        WorldPainter.paint.erase(this.location);\r\n        return this;\r\n    }\r\n    start() {\r\n        WorldRegister.cache.enable();\r\n        return this;\r\n    }\r\n    stop() {\r\n        WorldRegister.cache.disable();\r\n        return this;\r\n    }\r\n}\r\n","import { WorldRegister } from \"../../Data/World/WorldRegister.js\";\r\nimport { ChunkDataTool } from \"../Data/WorldData/ChunkDataTool.js\";\r\nimport { ThreadComm } from \"threadcomm\";\r\nimport { LocationBoundTool } from \"../../Tools/Classes/LocationBoundTool.js\";\r\nimport { GetTasksTool } from \"../../Tools/Tasks/TasksTool.js\";\r\nconst parentComm = ThreadComm.parent;\r\nexport class BuilderTool extends LocationBoundTool {\r\n    static _chunkTool = new ChunkDataTool();\r\n    tasks = GetTasksTool();\r\n    data = {\r\n        LOD: 1,\r\n    };\r\n    setLOD(lod) {\r\n        this.data.LOD = lod;\r\n        return this;\r\n    }\r\n    buildChunk() {\r\n        const [dimension, x, y, z] = this.location;\r\n        this.tasks.build.chunk.async.add(x, y, z);\r\n        this.tasks.build.chunk.async.run(() => { });\r\n        return this;\r\n    }\r\n    buildColumn(onDone) {\r\n        const [dimension, x, y, z] = this.location;\r\n        this.tasks._data.dimension = dimension;\r\n        this.tasks.build.column.deferred.run(x, y, z, onDone ? onDone : (data) => { });\r\n        return this;\r\n    }\r\n    removeColumn() {\r\n        const column = WorldRegister.column.get(this.location);\r\n        if (!column)\r\n            return false;\r\n        if (column.chunks.size == 0)\r\n            return false;\r\n        parentComm.runTasks(\"remove-column\", this.location);\r\n        return this;\r\n    }\r\n    fillColumn() {\r\n        WorldRegister.column.fill(this.location);\r\n        return this;\r\n    }\r\n    removeColumnsOutsideRadius(radius) {\r\n        parentComm.runTasks(\"remove-column-outside-radius\", [this.location, radius]);\r\n    }\r\n}\r\n","import { RegionHeaderRegister } from \"../../Data/World/Region/RegionHeaderRegister.js\";\r\nimport { ThreadComm } from \"threadcomm\";\r\nimport { ColumnDataTool } from \"./WorldData/ColumnDataTool.js\";\r\nimport { WorldRegister } from \"../../Data/World/WorldRegister.js\";\r\nimport { LocationBoundTool } from \"../Classes/LocationBoundTool.js\";\r\nimport { Distance3D } from \"../../Math/Functions/Distance3d.js\";\r\nimport { EngineSettings } from \"../../Data/Settings/EngineSettings.js\";\r\nimport { DataHooks } from \"../../Data/DataHooks.js\";\r\nexport class DataLoaderTool extends LocationBoundTool {\r\n    static columnDataTool = new ColumnDataTool();\r\n    static isEnabled() {\r\n        const comm = ThreadComm.getComm(\"data-loader\");\r\n        return Boolean(comm);\r\n    }\r\n    mode = \"server\";\r\n    _enabled = true;\r\n    dataComm;\r\n    constructor() {\r\n        super();\r\n        const comm = ThreadComm.getComm(\"data-loader\");\r\n        if (!comm) {\r\n            this._enabled = false;\r\n            console.error(\"Data Loader comm must be set.\");\r\n        }\r\n        this.dataComm = comm;\r\n        this.mode = EngineSettings.settings.data.mode;\r\n        DataHooks.settingsSynced.addToRun((data) => {\r\n            this.mode = data.data.mode;\r\n        });\r\n    }\r\n    isEnabled() {\r\n        return this._enabled;\r\n    }\r\n    saveRegion(onDone) {\r\n        const location = this.getLocation();\r\n        this.dataComm.runPromiseTasks(\"save-region\", location.toString() + Date.now(), () => (onDone ? onDone() : false), location);\r\n    }\r\n    saveRegionAsync() {\r\n        return new Promise((resolve) => {\r\n            this.saveRegion(() => {\r\n                resolve(true);\r\n            });\r\n        });\r\n    }\r\n    loadRegion(onDone) {\r\n        const location = this.getLocation();\r\n        this.dataComm.runPromiseTasks(\"load-region\", location.toString() + Date.now(), () => (onDone ? onDone() : false), location);\r\n    }\r\n    loadRegionAsync() {\r\n        return new Promise((resolve) => {\r\n            this.loadRegion(() => {\r\n                resolve(true);\r\n            });\r\n        });\r\n    }\r\n    saveColumn(onDone) {\r\n        const location = this.getLocation();\r\n        this.dataComm.runPromiseTasks(\"save-column\", location.toString() + Date.now(), () => (onDone ? onDone() : false), location);\r\n    }\r\n    saveColumnIfNotStored(onDone) {\r\n        const location = this.getLocation();\r\n        if (!DataLoaderTool.columnDataTool.setLocation(location).loadIn())\r\n            return onDone ? onDone(false) : false;\r\n        if (DataLoaderTool.columnDataTool.isStored())\r\n            return onDone ? onDone(false) : false;\r\n        this.dataComm.runPromiseTasks(\"save-column\", location.toString() + Date.now(), () => {\r\n            if (onDone)\r\n                onDone(true);\r\n        }, location);\r\n        return true;\r\n    }\r\n    loadIfExists(onDone) {\r\n        const location = [...this.getLocation()];\r\n        this.columnExists((exists) => {\r\n            if (exists) {\r\n                this.setLocation(location).loadColumn(() => {\r\n                    onDone ? onDone(true) : false;\r\n                });\r\n                return;\r\n            }\r\n            onDone ? onDone(false) : false;\r\n        });\r\n    }\r\n    saveColumnAsync() {\r\n        return new Promise((resolve) => {\r\n            this.saveColumn(() => {\r\n                resolve(true);\r\n            });\r\n        });\r\n    }\r\n    loadColumn(onDone) {\r\n        const location = this.getLocation();\r\n        this.dataComm.runPromiseTasks(\"load-column\", location.toString() + Date.now(), () => {\r\n            onDone ? onDone(true) : false;\r\n        }, location);\r\n    }\r\n    loadColumnAsync() {\r\n        return new Promise((resolve) => {\r\n            this.loadColumn(() => {\r\n                resolve(true);\r\n            });\r\n        });\r\n    }\r\n    unLoadColumn(onDone) {\r\n        const location = this.getLocation();\r\n        this.dataComm.runPromiseTasks(\"unload-column\", location.toString() + Date.now(), () => {\r\n            onDone ? onDone(true) : false;\r\n        }, location);\r\n    }\r\n    _runTask(id, location, onDone) {\r\n        this.dataComm.runPromiseTasks(id, location.toString() + Date.now(), (data) => {\r\n            onDone ? onDone(data) : false;\r\n        }, location);\r\n    }\r\n    columnExists(onDone) {\r\n        const location = [...this.getLocation()];\r\n        if (this.mode == \"server\") {\r\n            if (!RegionHeaderRegister.get(location)) {\r\n                this.loadRegionHeader(() => {\r\n                    this.setLocation(location).columnExists(onDone);\r\n                });\r\n                return;\r\n            }\r\n            const exists = RegionHeaderRegister.isStored(location);\r\n            onDone ? onDone(exists >= 1 ? true : false) : false;\r\n            return;\r\n        }\r\n        this.dataComm.runPromiseTasks(\"column-exists\", location.toString() + Date.now(), (data) => {\r\n            onDone ? onDone(data) : false;\r\n        }, location);\r\n    }\r\n    loadRegionHeader(onDone) {\r\n        const location = this.getLocation();\r\n        this.dataComm.runPromiseTasks(\"load-region-header\", location.toString() + Date.now(), (data) => {\r\n            onDone ? onDone(data) : false;\r\n        }, location);\r\n    }\r\n    loadRegionHeaderAsync() {\r\n        return new Promise((resolve) => {\r\n            this.loadRegionHeader((anaswer) => {\r\n                resolve(anaswer);\r\n            });\r\n        });\r\n    }\r\n    columnExistsAsync() {\r\n        return new Promise((resolve) => {\r\n            this.columnExists((anaswer) => {\r\n                resolve(anaswer);\r\n            });\r\n        });\r\n    }\r\n    columnTimestamp(onDone) {\r\n        const location = this.getLocation();\r\n        this.dataComm.runPromiseTasks(\"column-timestamp\", location.toString() + Date.now(), (data) => {\r\n            onDone ? onDone(data) : false;\r\n        }, location);\r\n    }\r\n    columnTimestampAsync() {\r\n        return new Promise((resolve) => {\r\n            this.columnTimestamp((timeStamp) => {\r\n                resolve(timeStamp);\r\n            });\r\n        });\r\n    }\r\n    unLoadAllOutsideRadius(radius, run = (columntool) => true, onDone) {\r\n        const [dimension, sx, sy, sz] = this.location;\r\n        const regions = WorldRegister.dimensions.get(dimension);\r\n        if (!regions)\r\n            return;\r\n        let totalColumns = 0;\r\n        for (const [key, region] of regions) {\r\n            for (const [ckey, column] of region.columns) {\r\n                DataLoaderTool.columnDataTool.setColumn(column);\r\n                if (DataLoaderTool.columnDataTool.isPersistent())\r\n                    continue;\r\n                const [dimension, cx, cy, cz] = DataLoaderTool.columnDataTool.getLocationData();\r\n                if (!run(DataLoaderTool.columnDataTool))\r\n                    continue;\r\n                const d = Distance3D(sx, sy, sz, cx, cy, cz);\r\n                if (d > radius) {\r\n                    totalColumns++;\r\n                    this.setXYZ(cx, cy, cz).unLoadColumn(() => {\r\n                        totalColumns--;\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        const inte = setInterval(() => {\r\n            if (totalColumns == 0) {\r\n                clearInterval(inte);\r\n                if (onDone)\r\n                    onDone();\r\n            }\r\n        }, 1);\r\n    }\r\n    getAllUnStoredColumns(run) {\r\n        const [dimension, sx, sy, sz] = this.location;\r\n        const regions = WorldRegister.dimensions.get(dimension);\r\n        if (!regions)\r\n            return;\r\n        for (const [key, region] of regions) {\r\n            for (const [ckey, column] of region.columns) {\r\n                DataLoaderTool.columnDataTool.setColumn(column);\r\n                if (DataLoaderTool.columnDataTool.isStored())\r\n                    continue;\r\n                const [dimension, cx, cy, cz] = DataLoaderTool.columnDataTool.getLocationData();\r\n                run(dimension, cx, cy, cz);\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { ConstructorQueues as CQ } from \"../../Common/Queues/ConstructorQueues.js\";\r\nimport { ThreadComm } from \"threadcomm\";\r\nimport { WorldRegister } from \"../../Data/World/WorldRegister.js\";\r\nimport { CCM } from \"../../World/Threads/Threads.js\";\r\nimport { ConstructorTasks } from \"../../Common/Threads/Contracts/ConstructorTasks.js\";\r\nimport { WorldSpaces } from \"../../Data/World/WorldSpaces.js\";\r\nexport class TaskTool {\r\n    _data = {\r\n        dimension: \"main\",\r\n        queue: \"main\",\r\n    };\r\n    _thread = \"\";\r\n    _priority = 0;\r\n    constructor() {\r\n        this.build.chunk.async._s = this;\r\n        this.build.chunk.deferred._s = this;\r\n        this.build.column.deferred._s = this;\r\n        this.light.rgb.update._s = this;\r\n        this.light.rgb.remove._s = this;\r\n        this.light.sun.update._s = this;\r\n        this.light.sun.remove._s = this;\r\n        this.light.worldSun._s = this;\r\n        this.light.worldSun.deferred._s = this;\r\n        this.flow.update._s = this;\r\n        this.flow.remove._s = this;\r\n        this.explosion.run._s = this;\r\n        this.voxelUpdate.erase.async._s = this;\r\n        this.voxelUpdate.erase.deferred._s = this;\r\n        this.voxelUpdate.paint.async._s = this;\r\n        this.voxelUpdate.paint.deferred._s = this;\r\n        this.generate.deferred._s = this;\r\n        this.generate.async._s = this;\r\n        this.anaylzer.propagation._s = this;\r\n        this.anaylzer.update._s = this;\r\n        this._thread = ThreadComm.threadName;\r\n    }\r\n    setPriority(priority) {\r\n        this._priority = priority;\r\n        return this;\r\n    }\r\n    setFocalPoint(location) {\r\n        const [dimesnion, x, y, z] = location;\r\n        const queueKey = `${dimesnion}-${WorldSpaces.region.getKeyXYZ(x, y, z)}`;\r\n        CQ.addQueue(queueKey);\r\n        this._data.queue = queueKey;\r\n        this._thread = ThreadComm.threadName;\r\n        return this;\r\n    }\r\n    generate = {\r\n        async: {\r\n            _s: {},\r\n            add(x, y, z, data = []) {\r\n                CQ.generate.add([[this._s._data.dimension, x, y, z], data], this._s._data.queue);\r\n            },\r\n            run(onDone) {\r\n                CQ.generate.run(this._s._data.queue);\r\n                CQ.generate.onDone(this._s._data.queue, onDone);\r\n            },\r\n            async runAndAwait() {\r\n                await CQ.generate.runAndAwait(this._s._data.queue);\r\n            },\r\n        },\r\n        deferred: {\r\n            _s: {},\r\n            run(x, y, z, data, onDone) {\r\n                const requestsKey = `${this._s._data.dimension}-${x}-${y}-${z}}`;\r\n                CCM.runPromiseTasks(ConstructorTasks.generate, requestsKey, onDone, [[this._s._data.dimension, x, y, z], data]);\r\n            },\r\n        },\r\n    };\r\n    voxelUpdate = {\r\n        erase: {\r\n            deferred: {\r\n                _s: {},\r\n                run(x, y, z, onDone) {\r\n                    const requestsKey = `${this._s._data.dimension}-${x}-${y}-${z}}`;\r\n                    CCM.runPromiseTasks(ConstructorTasks.voxelErease, requestsKey, onDone, [[this._s._data.dimension, x, y, z], this._s._data.queue, this._s._thread]);\r\n                },\r\n            },\r\n            async: {\r\n                _s: {},\r\n                add(x, y, z) {\r\n                    CQ.voxelUpdate.erase.add([\r\n                        [this._s._data.dimension, x, y, z],\r\n                        this._s._data.queue,\r\n                        this._s._thread,\r\n                    ], this._s._data.queue);\r\n                },\r\n                run(onDone) {\r\n                    CQ.voxelUpdate.erase.run(this._s._data.queue);\r\n                    CQ.voxelUpdate.erase.onDone(this._s._data.queue, onDone);\r\n                },\r\n                async runAndAwait() {\r\n                    await CQ.voxelUpdate.erase.runAndAwait(this._s._data.queue);\r\n                },\r\n            },\r\n        },\r\n        paint: {\r\n            deferred: {\r\n                _s: {},\r\n                run(x, y, z, raw, onDone) {\r\n                    const requestsKey = `${this._s._data.dimension}-${x}-${y}-${z}}`;\r\n                    CCM.runPromiseTasks(ConstructorTasks.voxelPaint, requestsKey, onDone, [\r\n                        [this._s._data.dimension, x, y, z],\r\n                        raw,\r\n                        this._s._data.queue,\r\n                        this._s._thread,\r\n                    ]);\r\n                },\r\n            },\r\n            async: {\r\n                _s: {},\r\n                add(x, y, z, raw) {\r\n                    CQ.voxelUpdate.paint.add([\r\n                        [this._s._data.dimension, x, y, z],\r\n                        raw,\r\n                        this._s._data.queue,\r\n                        this._s._thread,\r\n                    ], this._s._data.queue);\r\n                },\r\n                run(onDone) {\r\n                    CQ.voxelUpdate.paint.run(this._s._data.queue);\r\n                    CQ.voxelUpdate.paint.onDone(this._s._data.queue, onDone);\r\n                },\r\n                async runAndAwait() {\r\n                    await CQ.voxelUpdate.paint.runAndAwait(this._s._data.queue);\r\n                },\r\n            },\r\n        },\r\n    };\r\n    build = {\r\n        chunk: {\r\n            deferred: {\r\n                _s: {},\r\n                run(buildTasks, onDone) {\r\n                    const requestsKey = buildTasks.toString();\r\n                    CCM.runPromiseTasks(ConstructorTasks.buildChunk, requestsKey, onDone, {\r\n                        data: buildTasks,\r\n                        priority: this._s._priority,\r\n                    });\r\n                },\r\n            },\r\n            async: {\r\n                _s: {},\r\n                add(x, y, z) {\r\n                    CQ.build.chunk.add({\r\n                        data: [[this._s._data.dimension, x, y, z], 1],\r\n                        priority: this._s._priority,\r\n                    }, this._s._data.queue);\r\n                },\r\n                run(onDone) {\r\n                    CQ.build.chunk.run(this._s._data.queue);\r\n                    CQ.build.chunk.onDone(this._s._data.queue, onDone);\r\n                },\r\n                async runAndAwait() {\r\n                    await CQ.build.chunk.runAndAwait(this._s._data.queue);\r\n                },\r\n            },\r\n        },\r\n        column: {\r\n            async: {},\r\n            deferred: {\r\n                _s: {},\r\n                run(x, y, z, onDone) {\r\n                    const requestsKey = `${this._s._data.dimension}-${x}-${y}-${z}}`;\r\n                    CCM.runPromiseTasks(ConstructorTasks.buildColumn, requestsKey, onDone, [[this._s._data.dimension, x, y, z], 1]);\r\n                },\r\n            },\r\n        },\r\n    };\r\n    explosion = {\r\n        run: {\r\n            _s: {},\r\n            add(x, y, z, radius) {\r\n                CQ.explosion.run.add([\r\n                    [this._s._data.dimension, x, y, z],\r\n                    radius,\r\n                    this._s._data.queue,\r\n                    this._s._thread,\r\n                ], this._s._data.queue);\r\n            },\r\n            run(onDone) {\r\n                CQ.explosion.run.run(this._s._data.queue);\r\n                CQ.explosion.run.onDone(this._s._data.queue, onDone);\r\n            },\r\n            async runAndAwait() {\r\n                await CQ.explosion.run.runAndAwait(this._s._data.queue);\r\n            },\r\n        },\r\n    };\r\n    flow = {\r\n        update: {\r\n            _s: {},\r\n            add(x, y, z) {\r\n                CQ.flow.update.add([[this._s._data.dimension, x, y, z], this._s._data.queue, this._s._thread], this._s._data.queue);\r\n            },\r\n            run(onDone) {\r\n                CQ.flow.update.run(this._s._data.queue);\r\n                CQ.flow.update.onDone(this._s._data.queue, onDone);\r\n            },\r\n            async runAndAwait() {\r\n                await CQ.flow.update.runAndAwait(this._s._data.queue);\r\n            },\r\n        },\r\n        remove: {\r\n            _s: {},\r\n            add(x, y, z) {\r\n                CQ.flow.remove.add([[this._s._data.dimension, x, y, z], this._s._data.queue, this._s._thread], this._s._data.queue);\r\n            },\r\n            run(onDone) {\r\n                CQ.flow.remove.run(this._s._data.queue);\r\n                CQ.flow.remove.onDone(this._s._data.queue, onDone);\r\n            },\r\n            async runAndAwait() {\r\n                await CQ.flow.remove.runAndAwait(this._s._data.queue);\r\n            },\r\n        },\r\n    };\r\n    anaylzer = {\r\n        propagation: {\r\n            _s: {},\r\n            run(x, y, z, onDone) {\r\n                const requestsKey = `${this._s._data.dimension}-${x}-${y}-${z}}`;\r\n                CCM.runPromiseTasks(ConstructorTasks.analyzerPropagation, requestsKey, onDone, [[this._s._data.dimension, x, y, z], this._s._data.queue, this._s._thread]);\r\n            },\r\n        },\r\n        update: {\r\n            _s: {},\r\n            run(x, y, z, onDone) {\r\n                const requestsKey = `${this._s._data.dimension}-${x}-${y}-${z}}`;\r\n                CCM.runPromiseTasks(ConstructorTasks.analyzerUpdate, requestsKey, onDone, [[this._s._data.dimension, x, y, z], this._s._data.queue, this._s._thread]);\r\n            },\r\n        },\r\n    };\r\n    light = {\r\n        rgb: {\r\n            update: {\r\n                _s: {},\r\n                add(x, y, z, queue = null) {\r\n                    queue = queue ? queue : this._s._data.queue;\r\n                    CQ.rgb.update.add([[this._s._data.dimension, x, y, z], queue, this._s._thread], queue);\r\n                },\r\n                run(onDone) {\r\n                    CQ.rgb.update.run(this._s._data.queue);\r\n                    CQ.rgb.update.onDone(this._s._data.queue, onDone);\r\n                },\r\n                async runAndAwait() {\r\n                    await CQ.rgb.update.runAndAwait(this._s._data.queue);\r\n                },\r\n            },\r\n            remove: {\r\n                _s: {},\r\n                add(x, y, z, queue = null) {\r\n                    queue = queue ? queue : this._s._data.queue;\r\n                    CQ.rgb.remove.add([[this._s._data.dimension, x, y, z], queue, this._s._thread], queue);\r\n                },\r\n                run(onDone) {\r\n                    CQ.rgb.remove.run(this._s._data.queue);\r\n                    CQ.rgb.remove.onDone(this._s._data.queue, onDone);\r\n                },\r\n                async runAndAwait() {\r\n                    await CQ.rgb.remove.runAndAwait(this._s._data.queue);\r\n                },\r\n            },\r\n        },\r\n        sun: {\r\n            update: {\r\n                _s: {},\r\n                add(x, y, z) {\r\n                    CQ.sun.update.add([\r\n                        [this._s._data.dimension, x, y, z],\r\n                        this._s._data.queue,\r\n                        this._s._thread,\r\n                    ], this._s._data.queue);\r\n                },\r\n                run(onDone) {\r\n                    CQ.sun.update.run(this._s._data.queue);\r\n                    CQ.sun.update.onDone(this._s._data.queue, onDone);\r\n                },\r\n                async runAndAwait() {\r\n                    await CQ.sun.update.runAndAwait(this._s._data.queue);\r\n                },\r\n            },\r\n            remove: {\r\n                _s: {},\r\n                add(x, y, z) {\r\n                    CQ.sun.remove.add([\r\n                        [this._s._data.dimension, x, y, z],\r\n                        this._s._data.queue,\r\n                        this._s._thread,\r\n                    ], this._s._data.queue);\r\n                },\r\n                run(onDone) {\r\n                    CQ.sun.remove.run(this._s._data.queue);\r\n                    CQ.sun.remove.onDone(this._s._data.queue, onDone);\r\n                },\r\n                async runAndAwait() {\r\n                    await CQ.sun.remove.runAndAwait(this._s._data.queue);\r\n                },\r\n            },\r\n        },\r\n        worldSun: {\r\n            _s: {},\r\n            deferred: {\r\n                _s: {},\r\n                run(x, y, z, onDone) {\r\n                    const requestsKey = `${this._s._data.dimension}-${x}-${y}-${z}}`;\r\n                    CCM.runPromiseTasks(ConstructorTasks.worldSun, requestsKey, onDone, [[this._s._data.dimension, x, y, z], this._s._thread]);\r\n                },\r\n            },\r\n            add(x, z, y = 0) {\r\n                CQ.worldSun.add([\r\n                    [this._s._data.dimension, x, y, z],\r\n                    this._s._data.queue,\r\n                    this._s._thread,\r\n                ]);\r\n                WorldRegister.column.fill([this._s._data.dimension, x, y, z]);\r\n            },\r\n            run(onDone) {\r\n                CQ.worldSun.run(this._s._data.queue);\r\n                CQ.worldSun.onDone(this._s._data.queue, onDone);\r\n            },\r\n            async runAndAwait() {\r\n                await CQ.worldSun.runAndAwait();\r\n            },\r\n        },\r\n    };\r\n}\r\nexport const GetTasksTool = function () {\r\n    return new TaskTool();\r\n};\r\n","//objects\r\nimport { VoxelDataGenerator } from \"./Generators/VoxelDataGenerator.js\";\r\nimport { WorldRegister } from \"../../Data/World/WorldRegister.js\";\r\nimport { DataSyncTypes } from \"../../Common/Threads/Contracts/DataSync.js\";\r\nimport { ChunkDataTags, InitalizeChunkTags } from \"./Tags/ChunkTags.js\";\r\nimport { ColumnDataTags, InitalizeColumnTags } from \"./Tags/ColumnTags.js\";\r\nimport { InitalizeRegionTags, RegionDataTags, RegionHeaderTagManager, } from \"./Tags/RegionTags.js\";\r\nimport { VoxelTags } from \"../../Data/Voxel/VoxelTags.js\";\r\nimport { RegionHeaderRegister } from \"../../Data/World/Region/RegionHeaderRegister.js\";\r\nimport { DimensionsRegister } from \"../../Data/World/Dimensions/DimensionsRegister.js\";\r\nimport { VoxelTagBuilder } from \"./TagBuilders/VoxelTagBuilder.js\";\r\nclass DataSyncNode {\r\n    data;\r\n    constructor(data) {\r\n        this.data = data;\r\n    }\r\n    unSync(input) {\r\n        const output = this.data.getUnSyncData(input);\r\n        if (!output)\r\n            return false;\r\n        DataSync.loopThroughComms((comm, options) => {\r\n            if (!this.data.commCheck(options))\r\n                return false;\r\n            comm.unSyncData(this.data.dataSyncType, output);\r\n        });\r\n    }\r\n    unSyncInThread(commName, input) {\r\n        const comm = DataSync.comms[commName];\r\n        if (!comm)\r\n            return;\r\n        const output = this.data.getUnSyncData(input);\r\n        if (!output)\r\n            return false;\r\n        if (!this.data.commCheck(DataSync.commOptions[commName]))\r\n            return false;\r\n        comm.unSyncData(this.data.dataSyncType, output);\r\n    }\r\n    sync(input) {\r\n        const output = this.data.getSyncData(input);\r\n        if (!output)\r\n            return false;\r\n        DataSync.loopThroughComms((comm, options) => {\r\n            if (!this.data.commCheck(options))\r\n                return false;\r\n            comm.syncData(this.data.dataSyncType, output);\r\n        });\r\n    }\r\n    syncInThread(commName, input) {\r\n        const comm = DataSync.comms[commName];\r\n        if (!comm)\r\n            return;\r\n        const output = this.data.getSyncData(input);\r\n        if (!output)\r\n            return false;\r\n        if (!this.data.commCheck(DataSync.commOptions[commName]))\r\n            return false;\r\n        comm.syncData(this.data.dataSyncType, output);\r\n    }\r\n}\r\n//type WorldDataSync = [LocationData,SharedArrayBuffer]\r\nexport const DataSync = {\r\n    voxelDataCreator: VoxelDataGenerator,\r\n    comms: {},\r\n    commOptions: {},\r\n    _ready: false,\r\n    $INIT() {\r\n        this.voxelDataCreator.$generateVoxelData();\r\n        VoxelTagBuilder.$SYNC();\r\n        InitalizeChunkTags();\r\n        InitalizeColumnTags();\r\n        InitalizeRegionTags();\r\n        this.voxelPalette.sync();\r\n        this.voxelTags.sync();\r\n        this.chunkTags.sync();\r\n        this.columnTags.sync();\r\n        this.regionTags.sync();\r\n        this._ready = true;\r\n    },\r\n    isReady() {\r\n        return this._ready;\r\n    },\r\n    registerComm(comm, data = {}) {\r\n        this.comms[comm.name] = comm;\r\n        this.commOptions[comm.name] = {\r\n            worldData: data.worldData !== undefined ? data.worldData : true,\r\n            voxelPalette: data.voxelPalette !== undefined ? data.voxelPalette : true,\r\n            voxelTags: data.voxelTags !== undefined ? data.voxelTags : true,\r\n            materials: data.materials !== undefined ? data.materials : false,\r\n            colliders: data.colliders !== undefined ? data.colliders : false,\r\n            worldDataTags: data.worldDataTags !== undefined ? data.worldDataTags : true,\r\n        };\r\n    },\r\n    loopThroughComms(func) {\r\n        for (const commKey of Object.keys(DataSync.comms)) {\r\n            const comm = DataSync.comms[commKey];\r\n            const options = DataSync.commOptions[commKey];\r\n            if (!comm.isReady())\r\n                continue;\r\n            func(comm, options);\r\n        }\r\n    },\r\n    dimesnion: new DataSyncNode({\r\n        dataSyncType: DataSyncTypes.dimesnion,\r\n        commCheck: (options) => options.worldData,\r\n        getSyncData: (input) => {\r\n            const dimensionData = DimensionsRegister.getDimension(input);\r\n            if (!dimensionData)\r\n                return false;\r\n            return dimensionData;\r\n        },\r\n        getUnSyncData: () => true,\r\n    }),\r\n    chunk: new DataSyncNode({\r\n        dataSyncType: DataSyncTypes.chunk,\r\n        commCheck: (options) => options.worldData,\r\n        getSyncData: (input) => {\r\n            const chunk = WorldRegister.chunk.get(input);\r\n            if (!chunk)\r\n                return false;\r\n            return [input, chunk.buffer];\r\n        },\r\n        getUnSyncData: () => true,\r\n    }),\r\n    column: new DataSyncNode({\r\n        dataSyncType: DataSyncTypes.column,\r\n        commCheck: (options) => options.worldData,\r\n        getSyncData: (input) => {\r\n            const column = WorldRegister.column.get(input);\r\n            if (!column)\r\n                return false;\r\n            return [input, column.buffer];\r\n        },\r\n        getUnSyncData: () => true,\r\n    }),\r\n    region: new DataSyncNode({\r\n        dataSyncType: DataSyncTypes.region,\r\n        commCheck: (options) => options.worldData,\r\n        getSyncData: (input) => {\r\n            const region = WorldRegister.region.get(input);\r\n            if (!region)\r\n                return false;\r\n            return [input, region.buffer];\r\n        },\r\n        getUnSyncData: () => true,\r\n    }),\r\n    regionHeader: new DataSyncNode({\r\n        dataSyncType: DataSyncTypes.regionHeader,\r\n        commCheck: (options) => options.worldData,\r\n        getSyncData: (input) => {\r\n            const regionHeader = RegionHeaderRegister.get(input);\r\n            if (!regionHeader)\r\n                return false;\r\n            return [input, regionHeader.buffer];\r\n        },\r\n        getUnSyncData: () => true,\r\n    }),\r\n    voxelTags: new DataSyncNode({\r\n        dataSyncType: DataSyncTypes.voxelTags,\r\n        commCheck: (options) => options.voxelTags,\r\n        getSyncData: () => [\r\n            VoxelTags.initData,\r\n            VoxelTags.voxelIndex.buffer,\r\n        ],\r\n        getUnSyncData: () => false,\r\n    }),\r\n    chunkTags: new DataSyncNode({\r\n        dataSyncType: DataSyncTypes.chunkTags,\r\n        commCheck: (options) => options.worldDataTags,\r\n        getSyncData: () => ChunkDataTags.initData,\r\n        getUnSyncData: () => false,\r\n    }),\r\n    columnTags: new DataSyncNode({\r\n        dataSyncType: DataSyncTypes.columnTags,\r\n        commCheck: (options) => options.worldDataTags,\r\n        getSyncData: () => ColumnDataTags.initData,\r\n        getUnSyncData: () => false,\r\n    }),\r\n    regionTags: new DataSyncNode({\r\n        dataSyncType: DataSyncTypes.regionTags,\r\n        commCheck: (options) => options.worldDataTags,\r\n        getSyncData: () => [RegionDataTags.initData, RegionHeaderTagManager.initData],\r\n        getUnSyncData: () => false,\r\n    }),\r\n    voxelPalette: new DataSyncNode({\r\n        dataSyncType: DataSyncTypes.voxelPalette,\r\n        commCheck: (options) => options.worldDataTags,\r\n        getSyncData: () => [\r\n            VoxelDataGenerator.palette._palette,\r\n            VoxelDataGenerator.palette._map,\r\n        ],\r\n        getUnSyncData: () => false,\r\n    }),\r\n    stringMap: new DataSyncNode({\r\n        dataSyncType: DataSyncTypes.registerStringMap,\r\n        commCheck: () => true,\r\n        getSyncData: (data) => data,\r\n        getUnSyncData: () => false,\r\n    }),\r\n};\r\n","//objects\r\nimport { DVEW } from \"../../DivineVoxelEngineWorld.js\";\r\nimport { VoxelPaletteReader } from \"../../../Data/Voxel/VoxelPalette.js\";\r\nimport { VoxelTagBuilder } from \"../TagBuilders/VoxelTagBuilder.js\";\r\nimport { VoxelTags } from \"../../../Data/Voxel/VoxelTags.js\";\r\nimport { VoxelTagIDs } from \"../../../Data/Constants/Tags/VoxelTagIds.js\";\r\nimport { LightData } from \"../../../Data/Light/LightByte.js\";\r\nexport const VoxelDataGenerator = {\r\n    $generateVoxelData() {\r\n        //build palette\r\n        for (const [key, voxel] of DVEW.voxelManager.voxelData) {\r\n            this.palette.registerVoxel(voxel);\r\n        }\r\n        VoxelPaletteReader.setVoxelPalette(this.palette._palette, this.palette._map);\r\n        //build index\r\n        const indexBuffer = new SharedArrayBuffer(this.palette._count * 2);\r\n        const voxelIndex = new Uint16Array(indexBuffer);\r\n        let currentCount = 0;\r\n        let currentParent = 0;\r\n        for (let i = 2; i < this.palette._count; i++) {\r\n            let newParent = VoxelPaletteReader.id.baseNumeric(i);\r\n            if (newParent != currentParent) {\r\n                currentParent = newParent;\r\n                voxelIndex[i] = currentCount;\r\n                currentCount++;\r\n            }\r\n        }\r\n        //create data buffer\r\n        const initData = VoxelTagBuilder.$INIT(DVEW.voxelManager.voxelData.size);\r\n        const buffer = new SharedArrayBuffer(initData.bufferSize);\r\n        initData.buffer = buffer;\r\n        VoxelTags.$INIT(initData);\r\n        VoxelTags.setBuffer(buffer);\r\n        //build data\r\n        for (const [key, voxel] of DVEW.voxelManager.voxelData) {\r\n            const baseID = VoxelPaletteReader.id.numberFromString(key);\r\n            if (!baseID)\r\n                continue;\r\n            VoxelTags.setTagIndex(voxelIndex[baseID]);\r\n            VoxelTagBuilder.setDefaults(VoxelTags);\r\n            for (const tag of voxel.tags) {\r\n                const [id, value] = tag;\r\n                if (id == VoxelTagIDs.lightValue) {\r\n                    const v = value;\r\n                    let sl = 0;\r\n                    sl = LightData.setR(v[0], sl);\r\n                    sl = LightData.setG(v[1], sl);\r\n                    sl = LightData.setB(v[2], sl);\r\n                    VoxelTags.setTag(VoxelTagIDs.lightValue, sl);\r\n                    continue;\r\n                }\r\n                VoxelTagBuilder.setNode(id, value, VoxelTags);\r\n            }\r\n        }\r\n        DVEW.data.voxelTags.sync(voxelIndex);\r\n        DVEW.data.voxelTags.$INIT(initData);\r\n    },\r\n    palette: {\r\n        _count: 2,\r\n        _palette: [\"dve_air\", \"dve_barrier\"],\r\n        _map: {\r\n            dve_air: 0,\r\n            dve_barrier: 1,\r\n        },\r\n        registerVoxel(voxel) {\r\n            this._palette[this._count] = voxel.id;\r\n            this._map[voxel.id] = this._count;\r\n            if (voxel.states) {\r\n                for (let i = this._count; i <= this._count + voxel.states; i++) {\r\n                    this._palette[i] = voxel.id;\r\n                }\r\n                this._count += voxel.states;\r\n            }\r\n            this._count++;\r\n        },\r\n        get() {\r\n            return this._palette;\r\n        },\r\n        getMap() {\r\n            return this._map;\r\n        },\r\n    },\r\n};\r\n","import { Util } from \"../../../Global/Util.helper.js\";\r\nimport { DVEMessageHeader, WorldDataHeaders, } from \"../../../Data/Constants/DataHeaders.js\";\r\nimport { ChunkDataTags } from \"../Tags/ChunkTags.js\";\r\nimport { ColumnDataTags } from \"../Tags/ColumnTags.js\";\r\nimport { RegionDataTags } from \"../Tags/RegionTags.js\";\r\nexport const WorldDataGenerator = {\r\n    chunk: {\r\n        create(buffer = false) {\r\n            if (buffer) {\r\n                return Util.convertBufferToSAB(buffer);\r\n            }\r\n            const newBuffer = new SharedArrayBuffer(ChunkDataTags.tagSize);\r\n            ChunkDataTags.setBuffer(newBuffer);\r\n            ChunkDataTags.setTag(\"#dve_header\", DVEMessageHeader);\r\n            ChunkDataTags.setTag(\"#dve_data_type\", WorldDataHeaders.chunk);\r\n            return newBuffer;\r\n        },\r\n    },\r\n    column: {\r\n        create(buffer = false) {\r\n            if (buffer) {\r\n                return Util.convertBufferToSAB(buffer);\r\n            }\r\n            const newBuffer = new SharedArrayBuffer(ColumnDataTags.tagSize);\r\n            ColumnDataTags.setBuffer(newBuffer);\r\n            ColumnDataTags.setTag(\"#dve_header\", DVEMessageHeader);\r\n            ColumnDataTags.setTag(\"#dve_data_type\", WorldDataHeaders.column);\r\n            return newBuffer;\r\n        },\r\n    },\r\n    region: {\r\n        create(buffer = false) {\r\n            if (buffer) {\r\n                return Util.convertBufferToSAB(buffer);\r\n            }\r\n            const newBuffer = new SharedArrayBuffer(RegionDataTags.tagSize);\r\n            RegionDataTags.setBuffer(newBuffer);\r\n            RegionDataTags.setTag(\"#dve_header\", DVEMessageHeader);\r\n            RegionDataTags.setTag(\"#dve_data_type\", WorldDataHeaders.region);\r\n            return newBuffer;\r\n        },\r\n    },\r\n};\r\n","export const VoxelManager = {\r\n    voxelData: new Map(),\r\n    getVoxelData(id) {\r\n        const voxelData = this.voxelData.get(id);\r\n        if (!voxelData) {\r\n            throw new Error(`Voxel with ${id} does not exists.`);\r\n        }\r\n        return voxelData;\r\n    },\r\n    registerVoxelData(data) {\r\n        if (Array.isArray(data)) {\r\n            for (const voxel of data) {\r\n                this.voxelData.set(voxel.id, voxel);\r\n            }\r\n            return;\r\n        }\r\n        this.voxelData.set(data.id, data);\r\n    },\r\n};\r\n","import { VoxelTagIDs } from \"../../../Data/Constants/Tags/VoxelTagIds.js\";\r\nimport { TagManager } from \"divine-binary-tags\";\r\nimport { DataSync } from \"../DataSync.js\";\r\nimport { Register } from \"../../../Data/Register/Register.js\";\r\nexport const VoxelTagBuilder = {\r\n    _nodeMap: new Map(),\r\n    _stringMaps: new Map(),\r\n    _defaults: new Map(),\r\n    addNode(node) {\r\n        if (Array.isArray(node)) {\r\n            for (const n of node) {\r\n                this._nodeMap.set(n.id, n);\r\n            }\r\n            return;\r\n        }\r\n        this._nodeMap.set(node.id, node);\r\n    },\r\n    getNode(id) {\r\n        return this._nodeMap.get(id);\r\n    },\r\n    setDefaults(tagManager) {\r\n        for (const [key, node] of this._nodeMap) {\r\n            const defaultValue = this._defaults.get(key);\r\n            if (!defaultValue)\r\n                continue;\r\n            tagManager.setTag(key, Number(defaultValue));\r\n        }\r\n    },\r\n    setNode(id, value, tagManager) {\r\n        const node = this.getNode(id);\r\n        if (!node)\r\n            return;\r\n        if (node.type == \"number\") {\r\n            tagManager.setTag(node.id, Number(value));\r\n        }\r\n        if (node.type == \"boolean\") {\r\n            tagManager.setTag(node.id, Number(value));\r\n        }\r\n        if (node.type == \"number-array\") {\r\n            if (!Array.isArray(value))\r\n                return false;\r\n            let i = value.length;\r\n            while (i--) {\r\n                tagManager.setArrayTagValue(node.id, i, value[i]);\r\n            }\r\n        }\r\n        if (node.type == \"string-map\") {\r\n            const data = this._stringMaps.get(node.id);\r\n            if (!data)\r\n                return false;\r\n            const v = String(value).trim();\r\n            if (data.found[v] === undefined) {\r\n                data.map.push(v);\r\n                data.found[v] = data.count;\r\n                data.count++;\r\n            }\r\n            tagManager.setTag(node.id, data.found[v]);\r\n        }\r\n    },\r\n    $INIT(totalVoxels) {\r\n        const tags = new TagManager(\"voxel-tag-manager\");\r\n        for (const [key, node] of this._nodeMap) {\r\n            if (node.type == \"number\") {\r\n                tags.registerTag({\r\n                    id: node.id,\r\n                    type: \"typed-number\",\r\n                    numberType: node.numberType,\r\n                });\r\n                this._defaults.set(node.id, node.default);\r\n                continue;\r\n            }\r\n            if (node.type == \"number-array\") {\r\n                tags.registerTag({\r\n                    id: node.id,\r\n                    type: \"typed-number-array\",\r\n                    numberType: node.numberType,\r\n                    length: node.length,\r\n                });\r\n                continue;\r\n            }\r\n            if (node.type == \"boolean\") {\r\n                tags.registerTag({\r\n                    id: node.id,\r\n                    type: \"boolean\",\r\n                });\r\n                this._defaults.set(node.id, node.default ? 1 : 0);\r\n            }\r\n            if (node.type == \"string-map\") {\r\n                tags.registerTag({\r\n                    id: node.id,\r\n                    type: \"typed-number\",\r\n                    numberType: \"16ui\",\r\n                });\r\n                this._stringMaps.set(node.id, {\r\n                    count: 0,\r\n                    found: {},\r\n                    map: [],\r\n                    allowedComms: node.allowedComms,\r\n                });\r\n            }\r\n        }\r\n        tags.$INIT({\r\n            indexBufferMode: \"shared\",\r\n            numberOfIndexes: totalVoxels,\r\n        });\r\n        return tags.initData;\r\n    },\r\n    $SYNC() {\r\n        for (const [key, map] of this._stringMaps) {\r\n            const data = [\"voxel\", key, map.map];\r\n            if (map.allowedComms.includes(\"world\")) {\r\n                Register.stringMaps.syncStringMap(data);\r\n            }\r\n            DataSync.loopThroughComms((comm) => {\r\n                if (comm.name == \"world\")\r\n                    return;\r\n                if (map.allowedComms.includes(comm.name)) {\r\n                    DataSync.stringMap.syncInThread(comm.name, data);\r\n                }\r\n            });\r\n        }\r\n    },\r\n};\r\nVoxelTagBuilder.addNode([\r\n    {\r\n        id: VoxelTagIDs.substance,\r\n        type: \"string-map\",\r\n        allowedComms: [\"constructor\", \"nexus\", \"fx\", \"world\"],\r\n    },\r\n    {\r\n        id: VoxelTagIDs.shapeID,\r\n        type: \"string-map\",\r\n        allowedComms: [\"constructor\"],\r\n    },\r\n    {\r\n        id: VoxelTagIDs.colliderID,\r\n        type: \"string-map\",\r\n        allowedComms: [\"nexus\"],\r\n    },\r\n    {\r\n        id: VoxelTagIDs.checkCollisions,\r\n        type: \"boolean\",\r\n        default: false,\r\n    },\r\n    {\r\n        id: VoxelTagIDs.material,\r\n        type: \"string-map\",\r\n        allowedComms: [\"nexus\"],\r\n    },\r\n    {\r\n        id: VoxelTagIDs.isLightSource,\r\n        type: \"boolean\",\r\n        default: false,\r\n    },\r\n    {\r\n        id: VoxelTagIDs.lightValue,\r\n        type: \"number\",\r\n        numberType: \"16ui\",\r\n        default: 0,\r\n    },\r\n    {\r\n        id: VoxelTagIDs.isRich,\r\n        type: \"boolean\",\r\n        default: false,\r\n    },\r\n    {\r\n        id: VoxelTagIDs.hardness,\r\n        type: \"number\",\r\n        numberType: \"32ui\",\r\n        default: 0,\r\n    },\r\n]);\r\n","import { ChunkTags } from \"../../../Data/World/Chunk/ChunkTags.js\";\r\nimport { TagManager } from \"divine-binary-tags\";\r\nimport { WorldSpaces } from \"../../../Data/World/WorldSpaces.js\";\r\nimport { WorldDataTagIDs } from \"../../../Data/Constants/Tags/WorldDataTagIds.js\";\r\nimport { ChunkTagIDs } from \"../../../Data/Constants/Tags/ChunkTagIds.js\";\r\nexport const ChunkDataTags = new TagManager(\"chunk-tags\");\r\nChunkDataTags.registerTag({\r\n    id: WorldDataTagIDs.header,\r\n    type: \"header\",\r\n    numberType: \"16ui\",\r\n});\r\nChunkDataTags.registerTag({\r\n    id: WorldDataTagIDs.dataType,\r\n    type: \"header\",\r\n    numberType: \"16ui\",\r\n});\r\nChunkDataTags.registerTag({\r\n    id: WorldDataTagIDs.dimensionId,\r\n    type: \"typed-number\",\r\n    numberType: \"16ui\",\r\n});\r\nChunkDataTags.registerTag({\r\n    id: WorldDataTagIDs.positionX,\r\n    type: \"typed-number\",\r\n    numberType: \"32i\",\r\n});\r\nChunkDataTags.registerTag({\r\n    id: WorldDataTagIDs.positionY,\r\n    type: \"typed-number\",\r\n    numberType: \"32i\",\r\n});\r\nChunkDataTags.registerTag({\r\n    id: WorldDataTagIDs.positionZ,\r\n    type: \"typed-number\",\r\n    numberType: \"32i\",\r\n});\r\nChunkDataTags.registerTag({\r\n    id: ChunkTagIDs.minHeight,\r\n    type: \"typed-number\",\r\n    numberType: \"8ui\",\r\n});\r\nChunkDataTags.registerTag({\r\n    id: ChunkTagIDs.maxHeight,\r\n    type: \"typed-number\",\r\n    numberType: \"8ui\",\r\n});\r\nexport function InitalizeChunkTags() {\r\n    ChunkDataTags.registerTag({\r\n        id: ChunkTagIDs.heightMap,\r\n        type: \"typed-number-array\",\r\n        numberType: \"32ui\",\r\n        length: WorldSpaces.chunk.getArea() * 2,\r\n    });\r\n    ChunkDataTags.registerTag({\r\n        id: ChunkTagIDs.voxelIDSegment,\r\n        type: \"typed-number-array\",\r\n        numberType: \"16ui\",\r\n        length: WorldSpaces.chunk.getVolume(),\r\n    });\r\n    ChunkDataTags.registerTag({\r\n        id: ChunkTagIDs.voxelLightSegment,\r\n        type: \"typed-number-array\",\r\n        numberType: \"16ui\",\r\n        length: WorldSpaces.chunk.getVolume(),\r\n    });\r\n    ChunkDataTags.registerTag({\r\n        id: ChunkTagIDs.voxelStateSegment,\r\n        type: \"typed-number-array\",\r\n        numberType: \"16ui\",\r\n        length: WorldSpaces.chunk.getVolume(),\r\n    });\r\n    ChunkDataTags.registerTag({\r\n        id: ChunkTagIDs.voxelSecondaryIDSegment,\r\n        type: \"typed-number-array\",\r\n        numberType: \"16ui\",\r\n        length: WorldSpaces.chunk.getVolume(),\r\n    });\r\n    const initData = ChunkDataTags.$INIT({\r\n        indexBufferMode: \"shared\",\r\n    });\r\n    ChunkTags.$INIT(initData);\r\n}\r\n","import { TagManager } from \"divine-binary-tags\";\r\nimport { ColumnTags } from \"../../../Data/World/Column/ColumnTags.js\";\r\nimport { WorldDataTagIDs } from \"../../../Data/Constants/Tags/WorldDataTagIds.js\";\r\nexport const ColumnDataTags = new TagManager(\"column-tags\");\r\nColumnDataTags.registerTag({\r\n    id: WorldDataTagIDs.header,\r\n    type: \"header\",\r\n    numberType: \"16ui\",\r\n});\r\nColumnDataTags.registerTag({\r\n    id: WorldDataTagIDs.dataType,\r\n    type: \"header\",\r\n    numberType: \"16ui\",\r\n});\r\nColumnDataTags.registerTag({\r\n    id: WorldDataTagIDs.dimensionId,\r\n    type: \"typed-number\",\r\n    numberType: \"16ui\",\r\n});\r\nColumnDataTags.registerTag({\r\n    id: WorldDataTagIDs.positionX,\r\n    type: \"typed-number\",\r\n    numberType: \"32i\",\r\n});\r\nColumnDataTags.registerTag({\r\n    id: WorldDataTagIDs.positionY,\r\n    type: \"typed-number\",\r\n    numberType: \"32i\",\r\n});\r\nColumnDataTags.registerTag({\r\n    id: WorldDataTagIDs.positionZ,\r\n    type: \"typed-number\",\r\n    numberType: \"32i\",\r\n});\r\nColumnDataTags.registerTag({\r\n    id: \"#dve_last_save_timestamp\",\r\n    type: \"typed-number\",\r\n    numberType: \"32ui\",\r\n});\r\nColumnDataTags.registerTag({\r\n    id: \"#dve_last_analyzer_update_timestamp\",\r\n    type: \"typed-number\",\r\n    numberType: \"32ui\",\r\n});\r\nColumnDataTags.registerTag({\r\n    id: \"#dve_is_stored\",\r\n    type: \"boolean\",\r\n});\r\nColumnDataTags.registerTag({\r\n    id: \"#dve_is_world_gen_done\",\r\n    type: \"boolean\",\r\n});\r\nColumnDataTags.registerTag({\r\n    id: \"#dve_is_world_sun_done\",\r\n    type: \"boolean\",\r\n});\r\nColumnDataTags.registerTag({\r\n    id: \"#dve_is_world_propagation_done\",\r\n    type: \"boolean\",\r\n});\r\nColumnDataTags.registerTag({\r\n    id: \"#dve_is_dirty\",\r\n    type: \"boolean\",\r\n});\r\nColumnDataTags.registerTag({\r\n    id: \"#dve_persistent\",\r\n    type: \"boolean\",\r\n});\r\nexport function InitalizeColumnTags() {\r\n    const initData = ColumnDataTags.$INIT({\r\n        indexBufferMode: \"shared\",\r\n    });\r\n    ColumnTags.$INIT(initData);\r\n}\r\n","import { WorldSpaces } from \"../../../Data/World/WorldSpaces.js\";\r\nimport { RegionHeaderTags, RegionTags } from \"../../../Data/World/Region/RegionTags.js\";\r\nimport { TagManager } from \"divine-binary-tags\";\r\nimport { WorldDataTagIDs } from \"../../../Data/Constants/Tags/WorldDataTagIds.js\";\r\nexport const RegionDataTags = new TagManager(\"region-tags\");\r\nRegionDataTags.registerTag({\r\n    id: WorldDataTagIDs.header,\r\n    type: \"header\",\r\n    numberType: \"16ui\",\r\n});\r\nRegionDataTags.registerTag({\r\n    id: WorldDataTagIDs.dataType,\r\n    type: \"header\",\r\n    numberType: \"16ui\",\r\n});\r\nRegionDataTags.registerTag({\r\n    id: \"#dve_total_players\",\r\n    type: \"typed-number\",\r\n    numberType: \"16ui\",\r\n});\r\nRegionDataTags.registerTag({\r\n    id: WorldDataTagIDs.dimensionId,\r\n    type: \"typed-number\",\r\n    numberType: \"16ui\",\r\n});\r\nRegionDataTags.registerTag({\r\n    id: WorldDataTagIDs.positionX,\r\n    type: \"typed-number\",\r\n    numberType: \"32i\",\r\n});\r\nRegionDataTags.registerTag({\r\n    id: WorldDataTagIDs.positionY,\r\n    type: \"typed-number\",\r\n    numberType: \"32i\",\r\n});\r\nRegionDataTags.registerTag({\r\n    id: WorldDataTagIDs.positionZ,\r\n    type: \"typed-number\",\r\n    numberType: \"32i\",\r\n});\r\nexport const RegionHeaderTagManager = new TagManager(\"region-header-tags\");\r\nexport function InitalizeRegionTags() {\r\n    const initData = RegionDataTags.$INIT({\r\n        indexBufferMode: \"shared\",\r\n    });\r\n    RegionTags.$INIT(initData);\r\n    RegionHeaderTagManager.registerTag({\r\n        id: \"#dved-column-sector-index\",\r\n        type: \"typed-number-array\",\r\n        numberType: \"16ui\",\r\n        length: WorldSpaces.region.getColumnVolume(),\r\n    });\r\n    RegionHeaderTagManager.registerTag({\r\n        id: \"#dved-column-legnth-index\",\r\n        type: \"typed-number-array\",\r\n        numberType: \"16ui\",\r\n        length: WorldSpaces.region.getColumnVolume(),\r\n    });\r\n    RegionHeaderTagManager.registerTag({\r\n        id: \"#dved-column-save-timestamp\",\r\n        type: \"typed-number-array\",\r\n        numberType: \"32ui\",\r\n        length: WorldSpaces.region.getColumnVolume(),\r\n    });\r\n    const headerInitData = RegionHeaderTagManager.$INIT({\r\n        indexBufferMode: \"shared\",\r\n    });\r\n    RegionHeaderTags.$INIT(headerInitData);\r\n}\r\n","//threads\r\nimport { ParentComm, NexusComm, RichWorldComm, DataComm, FXComm, CCM, } from \"./Threads/Threads.js\";\r\n//queues\r\nimport { ConstructorQueues } from \"../Common/Queues/ConstructorQueues.js\";\r\n//tasks\r\nimport { ConstructorTasks } from \"../Common/Tasks/ConstructorTasks.js\";\r\n//objects\r\nimport { EngineSettings } from \"../Data/Settings/EngineSettings.js\";\r\nimport { Util } from \"../Global/Util.helper.js\";\r\n//data\r\nimport { DataSync } from \"./Data/DataSync.js\";\r\nimport { DataManager } from \"../Data/DataManager.js\";\r\nimport { VoxelManager } from \"./Data/Managers/VoxelManager.js\";\r\nimport { ItemManager } from \"../Data/Items/ItemManager.js\";\r\nimport { WorldDataGenerator } from \"./Data/Generators/WorldDataGenerator.js\";\r\n//tags\r\nimport { VoxelTagBuilder } from \"./Data/TagBuilders/VoxelTagBuilder.js\";\r\n//tools\r\nimport { BuilderTool } from \"../Tools/Build/BuilderTool.js\";\r\nimport { GetAdvancedBrushTool } from \"../Tools/Brush/AdvancedBrushTool.js\";\r\nimport { ChunkDataTool } from \"../Tools/Data/WorldData/ChunkDataTool.js\";\r\nimport { ColumnDataTool } from \"../Tools/Data/WorldData/ColumnDataTool.js\";\r\nimport { DataTool } from \"../Tools/Data/DataTool.js\";\r\nimport { GetTasksTool } from \"../Tools/Tasks/TasksTool.js\";\r\nimport { HeightMapTool } from \"../Tools/Data/WorldData/HeightMapTool.js\";\r\nimport { RegionDataTool } from \"../Tools/Data/WorldData/RegionDataTool.js\";\r\nimport { DataLoaderTool } from \"../Tools/Data/DataLoaderTool.js\";\r\n//functions\r\nimport { InitWorldWorker } from \"./Init/InitWorldWorker.js\";\r\nimport { ThreadComm } from \"threadcomm\";\r\nimport { ChunkDataTags } from \"./Data/Tags/ChunkTags.js\";\r\nimport { WorldTasks } from \"./Tasks/WorldTasks.js\";\r\nimport { DataHooks } from \"../Data/DataHooks.js\";\r\n/**# Divine Voxel Engine World\r\n * ---\r\n * This handles everything in the world worker context.\r\n */\r\nexport const DVEW = {\r\n    environment: \"browser\",\r\n    __settingsHaveBeenSynced: false,\r\n    __renderIsDone: false,\r\n    __serverIsDone: false,\r\n    TC: ThreadComm,\r\n    UTIL: Util,\r\n    settings: EngineSettings,\r\n    worldTasks: WorldTasks,\r\n    generators: {\r\n        worldData: WorldDataGenerator,\r\n    },\r\n    data: DataManager,\r\n    dataSync: DataSync,\r\n    fxComm: FXComm,\r\n    dataComm: DataComm,\r\n    nexusComm: NexusComm,\r\n    parentComm: ParentComm,\r\n    ccm: CCM,\r\n    richWorldComm: RichWorldComm,\r\n    voxelManager: VoxelManager,\r\n    itemManager: ItemManager,\r\n    cQueues: ConstructorQueues,\r\n    cTasks: ConstructorTasks,\r\n    tags: {\r\n        voxels: VoxelTagBuilder,\r\n        chunks: ChunkDataTags,\r\n    },\r\n    isReady() {\r\n        return (DVEW.ccm.isReady() &&\r\n            DVEW.__settingsHaveBeenSynced &&\r\n            (DVEW.__renderIsDone || DVEW.__serverIsDone));\r\n    },\r\n    syncSettings(data) {\r\n        this.settings.syncSettings(data);\r\n        DataHooks.settingsSynced.run(data);\r\n        this.__settingsHaveBeenSynced = true;\r\n    },\r\n    async $INIT() {\r\n        await InitWorldWorker(this);\r\n    },\r\n    getAllTools() {\r\n        return {\r\n            brush: this.getBrush(),\r\n            builder: this.getBuilder(),\r\n            data: this.getDataTool(),\r\n            chunkData: this.getChunkDataTool(),\r\n            columnData: this.getColumnDataTool(),\r\n            regonData: this.getRegionTool(),\r\n            heightMap: this.getHeightMapTool(),\r\n            tasks: this.getTasksTool(),\r\n        };\r\n    },\r\n    getBrush() {\r\n        return GetAdvancedBrushTool();\r\n    },\r\n    getBuilder() {\r\n        return new BuilderTool();\r\n    },\r\n    getDataTool() {\r\n        return new DataTool();\r\n    },\r\n    getRegionTool() {\r\n        return new RegionDataTool();\r\n    },\r\n    getChunkDataTool() {\r\n        return new ChunkDataTool();\r\n    },\r\n    getColumnDataTool() {\r\n        return new ColumnDataTool();\r\n    },\r\n    getHeightMapTool() {\r\n        return new HeightMapTool();\r\n    },\r\n    getTasksTool() {\r\n        return GetTasksTool();\r\n    },\r\n    getDataLoaderTool() {\r\n        return new DataLoaderTool();\r\n    },\r\n};\r\nDVEW.environment = Util.getEnviorment();\r\nDVEW.TC.threadName = \"world\";\r\n","import { DataHooks } from \"../../../Data/DataHooks.js\";\r\nimport { WorldDataGenerator } from \"../../Data/Generators/WorldDataGenerator.js\";\r\nimport { DataSync } from \"../../Data/DataSync.js\";\r\nimport { DVEW } from \"../../DivineVoxelEngineWorld.js\";\r\nexport const RegisterDataHooks = () => {\r\n    const tasks = DVEW.getTasksTool();\r\n    let dataLoaderTool = null;\r\n    if (DVEW.settings.saveWorldData()) {\r\n        dataLoaderTool = DVEW.getDataLoaderTool();\r\n    }\r\n    /*\r\n   [chunks]\r\n   */\r\n    DataHooks.chunk.onGetAsync.addToRun(async () => WorldDataGenerator.chunk.create());\r\n    DataHooks.chunk.onGetSync.addToRun(() => WorldDataGenerator.chunk.create());\r\n    DataHooks.chunk.onNew.addToRun(async (data) => {\r\n        DataSync.chunk.sync(data);\r\n    });\r\n    DataHooks.chunk.onRemove.addToRun((data) => {\r\n        if (!dataLoaderTool) {\r\n            DataSync.chunk.unSync(data);\r\n            return;\r\n        }\r\n        dataLoaderTool.setLocation(data).saveColumn(() => {\r\n            DataSync.chunk.unSync(data);\r\n        });\r\n    });\r\n    /*\r\n   [columns]\r\n   */\r\n    DataHooks.column.onGetAsync.addToRun(async () => WorldDataGenerator.column.create());\r\n    DataHooks.column.onGetSync.addToRun(() => WorldDataGenerator.column.create());\r\n    DataHooks.column.onNew.addToRun(async (data) => DataSync.column.sync(data));\r\n    DataHooks.column.onRemove.addToRun((data) => {\r\n        if (!dataLoaderTool) {\r\n            DataSync.column.unSync(data);\r\n            return;\r\n        }\r\n        dataLoaderTool.setLocation(data).saveColumn(() => {\r\n            DataSync.column.unSync(data);\r\n        });\r\n    });\r\n    /*\r\n   [region]\r\n   */\r\n    DataHooks.region.onGetAsync.addToRun(async () => WorldDataGenerator.region.create());\r\n    DataHooks.region.onGetSync.addToRun(() => WorldDataGenerator.region.create());\r\n    DataHooks.region.onNew.addToRun(async (data) => {\r\n        DataSync.region.sync(data);\r\n    });\r\n    DataHooks.region.onRemove.addToRun((data) => {\r\n        if (!dataLoaderTool) {\r\n            DataSync.region.unSync(data);\r\n            return;\r\n        }\r\n        dataLoaderTool.setLocation(data).saveRegion(() => {\r\n            DataSync.region.unSync(data);\r\n        });\r\n    });\r\n    /*\r\n   [paint]\r\n   */\r\n    DataHooks.paint.onAddToRGBUpdate.addToRun((data) => {\r\n        tasks.light.rgb.update.add(data[1], data[2], data[3], \"main\");\r\n    });\r\n    DataHooks.paint.onRichVoxelPaint.addToRun((data) => {\r\n        // DVEW.richWorldComm.setInitalData(data);\r\n    });\r\n    /*\r\n   [dimensions]\r\n   */\r\n    DataHooks.dimension.onRegisterDimension.addToRun((data) => {\r\n        DVEW.cQueues.addQueue(data.id);\r\n        DataSync.dimesnion.sync(data.id);\r\n    });\r\n};\r\n","import { ThreadComm } from \"threadcomm\";\r\nimport { RegisterDataHooks } from \"../Hooks/Data/DataHooks.js\";\r\nexport async function InitWorldWorker(DVEW) {\r\n    let parent = \"render\";\r\n    if (DVEW.environment == \"node\") {\r\n        parent = \"server\";\r\n    }\r\n    await ThreadComm.$INIT(\"world\", parent);\r\n    RegisterDataHooks();\r\n    await DVEW.UTIL.createPromiseCheck({\r\n        check: () => {\r\n            return DVEW.isReady();\r\n        },\r\n        checkInterval: 1,\r\n    });\r\n    DVEW.dataSync.$INIT();\r\n    DVEW.cQueues.$INIT();\r\n}\r\n","import { ThreadComm } from \"threadcomm\";\r\n//data\r\nimport { WorldRegister } from \"../../Data/World/WorldRegister.js\";\r\nimport { WorldDataGenerator } from \"../Data/Generators/WorldDataGenerator.js\";\r\nimport { DataSync } from \"../Data/DataSync.js\";\r\nimport { RegionDataTool } from \"../../Tools/Data/WorldData/RegionDataTool.js\";\r\nimport { ColumnDataTool } from \"../../Tools/Data/WorldData/ColumnDataTool.js\";\r\nimport { ChunkDataTool } from \"../../Tools/Data/WorldData/ChunkDataTool.js\";\r\nimport { RegionHeaderRegister } from \"../../Data/World/Region/RegionHeaderRegister.js\";\r\nimport { DataLoaderTool } from \"../../Tools/Data/DataLoaderTool.js\";\r\nimport { WorldSpaces } from \"../../Data/World/WorldSpaces.js\";\r\nimport { BuilderTool } from \"../../Tools/Build/BuilderTool.js\";\r\nconst regionTool = new RegionDataTool();\r\nconst columnTool = new ColumnDataTool();\r\nconst chunkTool = new ChunkDataTool();\r\nconst dataLoaderTool = new DataLoaderTool();\r\nconst builderTool = new BuilderTool();\r\nconst loadInMap = new Map();\r\nexport const WorldTasks = {\r\n    addChunk: ThreadComm.registerTasks(\"add-chunk\", (location) => {\r\n        const chunk = WorldRegister.chunk.get(location);\r\n        if (chunk) {\r\n            DataSync.chunk.sync(location);\r\n            return;\r\n        }\r\n        if (dataLoaderTool.isEnabled()) {\r\n            WorldSpaces.column.getPositionLocation(location);\r\n            const columnLocation = [...WorldSpaces.column.getLocation()];\r\n            if (loadInMap.has(columnLocation.toString()))\r\n                return;\r\n            loadInMap.set(columnLocation.toString(), true);\r\n            dataLoaderTool.setLocation(columnLocation).loadIfExists((success) => {\r\n                loadInMap.delete(columnLocation.toString());\r\n                if (!success) {\r\n                    builderTool.setLocation(columnLocation).fillColumn();\r\n                }\r\n            });\r\n            return;\r\n        }\r\n        if (!chunk) {\r\n            WorldRegister.chunk.add(location, WorldDataGenerator.chunk.create());\r\n        }\r\n    }),\r\n    unLoad: {\r\n        unLoadColumn: ThreadComm.registerTasks(\"unload-column\", (data) => {\r\n            DataSync.column.unSync(data);\r\n            WorldRegister.column.remove(data);\r\n            const region = WorldRegister.region.get(data);\r\n            if (region && region.columns.size == 0) {\r\n                WorldRegister.region.remove(data);\r\n                DataSync.region.unSync(data);\r\n            }\r\n        }),\r\n    },\r\n    load: {\r\n        loadRegino: ThreadComm.registerTasks(\"load-region\", (data) => {\r\n            regionTool.setBuffer(data[0]);\r\n            const location = regionTool.getLocationData();\r\n            WorldRegister.region.add(location, data[0]);\r\n            DataSync.region.sync(location);\r\n        }),\r\n        loadReginoHeader: ThreadComm.registerTasks(\"load-region-header\", (data) => {\r\n            RegionHeaderRegister.add(data[0], data[1]);\r\n            const location = data[0];\r\n            DataSync.regionHeader.sync(location);\r\n        }),\r\n        loadColumn: ThreadComm.registerTasks(\"load-column\", (data) => {\r\n            columnTool.setBuffer(data[0]);\r\n            const location = columnTool.getLocationData();\r\n            WorldRegister.column.add(location, data[0]);\r\n            DataSync.column.sync(location);\r\n        }),\r\n        loadChunk: ThreadComm.registerTasks(\"load-chunk\", (data) => {\r\n            chunkTool.setBuffer(data[0]);\r\n            const location = chunkTool.getLocationData();\r\n            WorldRegister.chunk.add(location, data[0]);\r\n            DataSync.chunk.sync(location);\r\n        }),\r\n    },\r\n};\r\n","import { DataSync } from \"../Data/DataSync.js\";\r\nimport { ThreadComm } from \"threadcomm/\";\r\nimport { DVEW } from \"../DivineVoxelEngineWorld.js\";\r\nexport const CCM = ThreadComm.createCommManager({\r\n    name: \"constructor\",\r\n    onPortSet(port, commName) { },\r\n});\r\nDataSync.registerComm(CCM);\r\nexport const DataComm = ThreadComm.createComm(\"data-loader\", {});\r\nDataSync.registerComm(DataComm);\r\nexport const FXComm = ThreadComm.createComm(\"fx\");\r\nDataSync.registerComm(FXComm);\r\nexport const NexusComm = ThreadComm.createComm(\"nexus\");\r\nDataSync.registerComm(NexusComm, {\r\n    materials: true,\r\n    colliders: true,\r\n});\r\nexport const RichWorldComm = ThreadComm.createComm(\"rich-world\");\r\nexport const ParentComm = ThreadComm.parent;\r\nParentComm.listenForMessage(\"start\", function () {\r\n    DVEW.__serverIsDone = true;\r\n});\r\nParentComm.listenForMessage(\"re-start\", function () { });\r\nParentComm.listenForMessage(\"sync-settings\", (data, event) => {\r\n    if (!event)\r\n        return;\r\n    const settings = data[1];\r\n    DVEW.syncSettings(settings);\r\n});\r\n","export * from \"./DivineVoxelEngineWorld.js\";\r\n","export * from \"./PlayerManager.js\";\r\nexport * from \"./PlayerPhysicsData.js\";\r\nexport * from \"./PlayerStatsData.js\";\r\nexport * from \"./RegisterPlayerData.js\";\r\n","import { PlayerManager, PlayerPhysicsData } from \"../Data/index.js\";\r\nimport { WorldPlayer } from \"./WorldPlayer.js\";\r\nasync function SetUpPlayerData(DVEW) {\r\n    let playerDataReady = false;\r\n    DVEW.nexusComm.listenForMessage(\"connect-player-tags\", (data) => {\r\n        PlayerManager.physics = new PlayerPhysicsData(data[1], data[2]);\r\n        playerDataReady = true;\r\n    });\r\n    DVEW.nexusComm.sendMessage(\"request-player-tags\", []);\r\n    await DVEW.UTIL.createPromiseCheck({\r\n        check: () => {\r\n            if (!playerDataReady) {\r\n                DVEW.nexusComm.sendMessage(\"request-player-tags\", []);\r\n            }\r\n            return playerDataReady;\r\n        },\r\n        checkInterval: 1,\r\n    });\r\n}\r\nexport const INIT_WORLD_PLAYER = async (DVEW) => {\r\n    await SetUpPlayerData(DVEW);\r\n    return new WorldPlayer(DVEW, PlayerManager);\r\n};\r\n","import { VisitAll } from \"divine-voxel-engine/Math/index.js\";\r\nexport class WorldPlayer {\r\n    DVEW;\r\n    manager;\r\n    start = {\r\n        x: 0,\r\n        y: 0,\r\n        z: 0,\r\n    };\r\n    end = {\r\n        x: 0,\r\n        y: 0,\r\n        z: 0,\r\n    };\r\n    reachDistance = 10;\r\n    dataTool;\r\n    constructor(DVEW, manager) {\r\n        this.DVEW = DVEW;\r\n        this.manager = manager;\r\n        this.dataTool = DVEW.getDataTool();\r\n    }\r\n    hooks = {\r\n        onVoxelPickCheck: {\r\n            _funcs: [],\r\n            add(run) {\r\n                this._funcs.push(run);\r\n            },\r\n            run(data) {\r\n                let add = true;\r\n                this._funcs.forEach((_) => {\r\n                    add = _(data);\r\n                });\r\n                return add;\r\n            },\r\n        },\r\n    };\r\n    update() {\r\n        this.start.x = this.manager.physics.position.x;\r\n        this.start.y =\r\n            this.manager.physics.position.y + this.manager.physics.eyeLevel;\r\n        this.start.z = this.manager.physics.position.z;\r\n        this.end.x =\r\n            this.manager.physics.direction.x * this.reachDistance + this.start.x;\r\n        this.end.y =\r\n            this.manager.physics.direction.y * this.reachDistance + this.start.y;\r\n        this.end.z =\r\n            this.manager.physics.direction.z * this.reachDistance + this.start.z;\r\n        const voxels = VisitAll(this.start, this.end);\r\n        let foundVoxel = false;\r\n        for (let i = 0; i < voxels.length; i += 3) {\r\n            const x = voxels[i];\r\n            const y = voxels[i + 1];\r\n            const z = voxels[i + 2];\r\n            if (!this.dataTool.loadInAt(x, y, z))\r\n                continue;\r\n            if (!this.hooks.onVoxelPickCheck.run(this.dataTool))\r\n                continue;\r\n            if (this.dataTool.isRenderable()) {\r\n                this.manager.physics.pick.position.x = x;\r\n                this.manager.physics.pick.position.y = y;\r\n                this.manager.physics.pick.position.z = z;\r\n                foundVoxel = true;\r\n                break;\r\n            }\r\n        }\r\n        if (!foundVoxel)\r\n            this.manager.physics.pick.position.set(-Infinity, 0, 0);\r\n    }\r\n}\r\n","export * from \"./WorldPlayer.js\";\r\nexport * from \"./InitWorldPlayer.js\";\r\n","export const SimulationLoop = {\r\n    speed: 0,\r\n    _delta: 0,\r\n    _previous: 0,\r\n    _performance: {},\r\n    _intervals: new Map(),\r\n    async $INIT(speed) {\r\n        this.speed = speed;\r\n        if (performance) {\r\n            this._performance = performance;\r\n        }\r\n        else {\r\n            //@ts-ignore\r\n            if (require) {\r\n                //@ts-ignore\r\n                this._performance = require(\"perf_hooks\").performance;\r\n            }\r\n            else {\r\n                //@ts-ignore\r\n                this._performance = (await import(\"perf_hooks\")).performance;\r\n            }\r\n        }\r\n        this._previous = this._performance.now();\r\n    },\r\n    _round(n) {\r\n        const d = Math.floor(n / 10) * 10;\r\n        if (d < 10)\r\n            return 10;\r\n        return d;\r\n    },\r\n    registerInterval(interval) {\r\n        this._intervals.set(this._round(interval), {\r\n            delta: 0,\r\n            functions: [],\r\n        });\r\n    },\r\n    addToInterval(interval, run) {\r\n        const inte = this._intervals.get(this._round(interval));\r\n        if (!inte)\r\n            return;\r\n        inte.functions.push(run);\r\n    },\r\n    run() {\r\n        const n = this._performance.now();\r\n        this._delta = n - this._previous;\r\n        this._previous = n;\r\n        const roundedDelta = this._round(this._delta);\r\n        for (const [inte, data] of this._intervals) {\r\n            if (inte < roundedDelta) {\r\n                data.functions.forEach((_) => _());\r\n                continue;\r\n            }\r\n            if (data.delta + roundedDelta >= inte) {\r\n                data.functions.forEach((_) => _(data.delta + roundedDelta));\r\n                data.delta = 0;\r\n                continue;\r\n            }\r\n            if (data.delta < inte) {\r\n                data.delta += roundedDelta;\r\n            }\r\n        }\r\n        setTimeout(() => {\r\n            this.run();\r\n        }, this.speed / 2);\r\n    },\r\n};\r\n","export * from \"./SimulationLoop.js\";\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = () => {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [\"DSLIBS_divineVoxelEngine_dist_Data_Settings_EngineSettings_js-DSLIBS_threadComm_dist_index_js\",\"DSLIBS_divineVoxelEngine_dist_Common_Threads_Contracts_DataSync_js-DSLIBS_divineVoxelEngine_d-d7fdd9\",\"DSLIBS_divineVoxelEngine_dist_Math_index_js\",\"DSLIBS_dvePlugIns_Player_dist_Data_PlayerManager_js-DSLIBS_dvePlugIns_Player_dist_Data_Regist-d31b5c\"], () => (__webpack_require__(\"./compiled/client/World/world.js\")))\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","var webpackQueues = typeof Symbol === \"function\" ? Symbol(\"webpack queues\") : \"__webpack_queues__\";\nvar webpackExports = typeof Symbol === \"function\" ? Symbol(\"webpack exports\") : \"__webpack_exports__\";\nvar webpackError = typeof Symbol === \"function\" ? Symbol(\"webpack error\") : \"__webpack_error__\";\nvar resolveQueue = (queue) => {\n\tif(queue && !queue.d) {\n\t\tqueue.d = 1;\n\t\tqueue.forEach((fn) => (fn.r--));\n\t\tqueue.forEach((fn) => (fn.r-- ? fn.r++ : fn()));\n\t}\n}\nvar wrapDeps = (deps) => (deps.map((dep) => {\n\tif(dep !== null && typeof dep === \"object\") {\n\t\tif(dep[webpackQueues]) return dep;\n\t\tif(dep.then) {\n\t\t\tvar queue = [];\n\t\t\tqueue.d = 0;\n\t\t\tdep.then((r) => {\n\t\t\t\tobj[webpackExports] = r;\n\t\t\t\tresolveQueue(queue);\n\t\t\t}, (e) => {\n\t\t\t\tobj[webpackError] = e;\n\t\t\t\tresolveQueue(queue);\n\t\t\t});\n\t\t\tvar obj = {};\n\t\t\tobj[webpackQueues] = (fn) => (fn(queue));\n\t\t\treturn obj;\n\t\t}\n\t}\n\tvar ret = {};\n\tret[webpackQueues] = x => {};\n\tret[webpackExports] = dep;\n\treturn ret;\n}));\n__webpack_require__.a = (module, body, hasAwait) => {\n\tvar queue;\n\thasAwait && ((queue = []).d = 1);\n\tvar depQueues = new Set();\n\tvar exports = module.exports;\n\tvar currentDeps;\n\tvar outerResolve;\n\tvar reject;\n\tvar promise = new Promise((resolve, rej) => {\n\t\treject = rej;\n\t\touterResolve = resolve;\n\t});\n\tpromise[webpackExports] = exports;\n\tpromise[webpackQueues] = (fn) => (queue && fn(queue), depQueues.forEach(fn), promise[\"catch\"](x => {}));\n\tmodule.exports = promise;\n\tbody((deps) => {\n\t\tcurrentDeps = wrapDeps(deps);\n\t\tvar fn;\n\t\tvar getResult = () => (currentDeps.map((d) => {\n\t\t\tif(d[webpackError]) throw d[webpackError];\n\t\t\treturn d[webpackExports];\n\t\t}))\n\t\tvar promise = new Promise((resolve) => {\n\t\t\tfn = () => (resolve(getResult));\n\t\t\tfn.r = 0;\n\t\t\tvar fnQueue = (q) => (q !== queue && !depQueues.has(q) && (depQueues.add(q), q && !q.d && (fn.r++, q.push(fn))));\n\t\t\tcurrentDeps.map((dep) => (dep[webpackQueues](fnQueue)));\n\t\t});\n\t\treturn fn.r ? promise : getResult();\n\t}, (err) => ((err ? reject(promise[webpackError] = err) : outerResolve(exports)), resolveQueue(queue)));\n\tqueue && (queue.d = 0);\n};","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".DVE.js\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t\"compiled_client_World_world_js\": 1\n};\n\n// importScripts chunk loading\nvar installChunk = (data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkdve_testing\"] = self[\"webpackChunkdve_testing\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = () => {\n\treturn Promise.all([\"DSLIBS_divineVoxelEngine_dist_Data_Settings_EngineSettings_js-DSLIBS_threadComm_dist_index_js\",\"DSLIBS_divineVoxelEngine_dist_Common_Threads_Contracts_DataSync_js-DSLIBS_divineVoxelEngine_d-d7fdd9\",\"DSLIBS_divineVoxelEngine_dist_Math_index_js\",\"DSLIBS_dvePlugIns_Player_dist_Data_PlayerManager_js-DSLIBS_dvePlugIns_Player_dist_Data_Regist-d31b5c\"].map(__webpack_require__.e, __webpack_require__)).then(next);\n};","","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n",""],"names":[],"sourceRoot":""}